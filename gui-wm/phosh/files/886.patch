From 7072c60944a40de1b2a9e390753b5630e16ea7ed Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 19 Aug 2021 15:22:20 +0200
Subject: [PATCH 01/15] torch-manager: Don't emit a warning when no torch is
 found
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This makes running with G_DEBUG=fatal-warnings harder than necessary.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/torch-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/torch-manager.c b/src/torch-manager.c
index d11d2a7f..e352ff1d 100644
--- a/src/torch-manager.c
+++ b/src/torch-manager.c
@@ -179,7 +179,7 @@ find_torch_device (PhoshTorchManager *self)
 
   device_list = g_udev_enumerator_execute (udev_enumerator);
   if (!device_list) {
-    g_warning ("Failed to find a torch device");
+    g_debug ("Failed to find a torch device");
     return FALSE;
   }
 
-- 
GitLab


From 8b4630e6d84a7b088da5a85b35831d04fea3bd6f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 19 Aug 2021 14:17:28 +0200
Subject: [PATCH 02/15] system-modal-dialog: Drop `can-focus` proprties that
 use default value
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/ui/system-modal-dialog.ui | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/src/ui/system-modal-dialog.ui b/src/ui/system-modal-dialog.ui
index 92d6eea1..500c5b22 100644
--- a/src/ui/system-modal-dialog.ui
+++ b/src/ui/system-modal-dialog.ui
@@ -3,7 +3,6 @@
 <interface>
   <requires lib="gtk+" version="3.20"/>
   <template class="PhoshSystemModalDialog" parent="PhoshSystemModal">
-    <property name="can-focus">False</property>
     <child>
       <object class="PhoshSwipeAwayBin" id="swipe_bin">
         <property name="visible">True</property>
@@ -11,19 +10,16 @@
         <child>
           <object class="HdyClamp">
             <property name="visible">True</property>
-            <property name="can_focus">False</property>
             <property name="maximum_size">400</property>
             <child>
               <object class="GtkBox" id="box_dialog">
                 <property name="visible">True</property>
-                <property name="can-focus">False</property>
                 <property name="halign">center</property>
                 <property name="valign">center</property>
                 <property name="orientation">vertical</property>
                 <child>
                   <object class="GtkLabel" id="lbl_title">
                     <property name="visible">True</property>
-                    <property name="can-focus">False</property>
                     <property name="halign">center</property>
                     <property name="margin-bottom">12</property>
                     <property name="hexpand">True</property>
@@ -41,7 +37,6 @@
                 <child>
                   <object class="GtkBox" id="box_buttons">
                     <property name="visible">True</property>
-                    <property name="can-focus">False</property>
                     <property name="homogeneous">True</property>
                     <property name="margin-top">12</property>
                     <style>
-- 
GitLab


From e37e07ab560859d146ba4e7d39af7fbb434cfda6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Wed, 18 Aug 2021 21:11:08 +0200
Subject: [PATCH 03/15] util: Add helper to strip '.desktop' from app_id
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Needed in several places

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/util.c | 24 +++++++++++++++++++++++-
 src/util.h |  1 +
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/src/util.c b/src/util.c
index e7c4d366..432aeb32 100644
--- a/src/util.c
+++ b/src/util.c
@@ -44,7 +44,7 @@ phosh_fix_app_id (const char *app_id)
  * @app_id: the app_id
  *
  * Munges an app_id according to the rules used by
- * gnome-shell, feedbackd and phoc:
+ * gnome-shell, feedbackd and phoc for gsettings:
  *
  * Returns: The munged_app id
  */
@@ -72,6 +72,28 @@ phosh_munge_app_id (const char *app_id)
   return id;
 }
 
+
+/**
+ * phosh_strip_suffix_from_app_id:
+ * @app_id: the app_id
+ *
+ * Strip the desktop suffix from app_id.
+ *
+ * Returns: (transfer full): The munged_app id
+ */
+char *
+phosh_strip_suffix_from_app_id (const char *app_id)
+{
+  char *new_id = g_strdup (app_id);
+  
+  if (new_id && g_str_has_suffix (app_id, ".desktop")) {
+    *(new_id + strlen (new_id) - 8 /* strlen (".desktop") */) = '\0';
+  }
+
+  return new_id;
+}
+
+
 gboolean
 phosh_find_systemd_session (char **session_id)
 {
diff --git a/src/util.h b/src/util.h
index 2586f8ef..5065b60e 100644
--- a/src/util.h
+++ b/src/util.h
@@ -20,6 +20,7 @@
 void     phosh_cp_widget_destroy (void *widget);
 char    *phosh_fix_app_id (const char *app_id);
 gchar   *phosh_munge_app_id (const gchar *app_id);
+char    *phosh_strip_suffix_from_app_id (const char *app_id);
 gboolean phosh_find_systemd_session (char **session_id);
 gboolean phosh_error_warnv (const char  *log_domain,
                             GError      *err,
-- 
GitLab


From c0d8d7146f746f5c25f741f55e234ebb7db2f3db Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Sun, 24 Jan 2021 17:07:31 +0100
Subject: [PATCH 04/15] Add PhoshSplash
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Splash screen for launching applications. It times out after
5 seconds if not closed.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 docs/phosh-docs.xml                 |   1 +
 src/meson.build                     |   2 +
 src/phosh.gresources.xml            |   1 +
 src/splash.c                        | 259 ++++++++++++++++++++++++++++
 src/splash.h                        |  27 +++
 src/stylesheet/adwaita-dark.css     |   2 +
 src/stylesheet/adwaita-hc-light.css |   2 +
 src/stylesheet/common.css           |  20 +++
 src/ui/splash.ui                    |  37 ++++
 9 files changed, 351 insertions(+)
 create mode 100644 src/splash.c
 create mode 100644 src/splash.h
 create mode 100644 src/ui/splash.ui

diff --git a/docs/phosh-docs.xml b/docs/phosh-docs.xml
index e28abeb0..c20e8d0f 100644
--- a/docs/phosh-docs.xml
+++ b/docs/phosh-docs.xml
@@ -113,6 +113,7 @@
       <xi:include href="xml/shell-network-agent.xml"/>
       <xi:include href="xml/shell.xml"/>
       <xi:include href="xml/status-icon.xml"/>
+      <xi:include href="xml/splash.xml"/>
       <xi:include href="xml/swipe-away-bin.xml"/>
       <xi:include href="xml/system-modal.xml"/>
       <xi:include href="xml/system-modal-dialog.xml"/>
diff --git a/src/meson.build b/src/meson.build
index 301df0ff..7dddb07b 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -105,6 +105,8 @@ libphosh_tool_sources = files(
   'osd-window.h',
   'status-icon.c',
   'status-icon.h',
+  'splash.c',
+  'splash.h',
   'system-modal.c',
   'system-modal.h',
   'system-modal-dialog.c',
diff --git a/src/phosh.gresources.xml b/src/phosh.gresources.xml
index bdf094f6..428fe760 100644
--- a/src/phosh.gresources.xml
+++ b/src/phosh.gresources.xml
@@ -18,6 +18,7 @@
     <file preprocess="xml-stripblanks">ui/osd-window.ui</file>
     <file preprocess="xml-stripblanks">ui/settings-menu.ui</file>
     <file preprocess="xml-stripblanks">ui/system-modal-dialog.ui</file>
+    <file preprocess="xml-stripblanks">ui/splash.ui</file>
     <file preprocess="xml-stripblanks">ui/system-prompt.ui</file>
     <file preprocess="xml-stripblanks">ui/top-panel.ui</file>
     <file preprocess="xml-stripblanks">ui/quick-setting.ui</file>
diff --git a/src/splash.c b/src/splash.c
new file mode 100644
index 00000000..4e91fafa
--- /dev/null
+++ b/src/splash.c
@@ -0,0 +1,259 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Author: Guido Günther <agx@sigxcpu.org>
+ */
+
+#define G_LOG_DOMAIN "phosh-splash"
+
+#include "config.h"
+
+#include "shell.h"
+#include "splash.h"
+
+#define PHOSH_APP_UNKNOWN_ICON "app-icon-unknown"
+#define SPLASH_TIMEOUT 5
+
+/**
+ * SECTION:splash
+ * @short_description: A splash screen
+ * @Title: PhoshSplash
+ *
+ * The #PhoshSplash is a splash screen used to indicate application
+ * startup.
+ */
+
+enum {
+  PROP_0,
+  PROP_APP_INFO,
+  PROP_LAST_PROP,
+};
+static GParamSpec *props[PROP_LAST_PROP];
+
+
+enum {
+  CLOSED,
+  N_SIGNALS
+};
+static guint signals[N_SIGNALS] = { 0 };
+
+
+typedef struct {
+  struct zwlr_layer_shell_v1 *layer_shell;
+
+  GAppInfo                   *info;
+  GtkWidget                  *box;
+  GIcon                      *icon;
+  GtkWidget                  *img_app;
+
+  guint                       timeout_id;
+} PhoshSplashPrivate;
+
+G_DEFINE_TYPE_WITH_PRIVATE (PhoshSplash, phosh_splash, PHOSH_TYPE_LAYER_SURFACE);
+
+
+static void
+phosh_splash_set_property (GObject      *obj,
+                           guint         prop_id,
+                           const GValue *value,
+                           GParamSpec   *pspec)
+{
+  PhoshSplash *self = PHOSH_SPLASH (obj);
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+
+  switch (prop_id) {
+  case PROP_APP_INFO:
+    g_set_object (&priv->info, g_value_get_object (value));
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (obj, prop_id, pspec);
+    break;
+  }
+}
+
+
+static void
+phosh_splash_get_property (GObject    *obj,
+                           guint       prop_id,
+                           GValue     *value,
+                           GParamSpec *pspec)
+{
+  PhoshSplash *self = PHOSH_SPLASH (obj);
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+
+  switch (prop_id) {
+  case PROP_APP_INFO:
+    g_value_set_object (value, priv->info);
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (obj, prop_id, pspec);
+    break;
+  }
+}
+
+
+static gboolean
+on_splash_timeout (gpointer data)
+{
+  PhoshSplash *self = PHOSH_SPLASH (data);
+  PhoshSplashPrivate *priv;
+
+  g_return_val_if_fail (PHOSH_IS_SPLASH (self), G_SOURCE_REMOVE);
+  priv = phosh_splash_get_instance_private (self);
+  priv->timeout_id = 0;
+
+  g_debug ("Splash for '%s' timed out", g_app_info_get_id (priv->info));
+  g_signal_emit (self, signals[CLOSED], 0);
+
+  return G_SOURCE_REMOVE;
+}
+
+
+static void
+phosh_splash_dispose (GObject *obj)
+{
+  PhoshSplash *self = PHOSH_SPLASH (obj);
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+
+  g_clear_object (&priv->info);
+  g_clear_handle_id (&priv->timeout_id, g_source_remove);
+
+  G_OBJECT_CLASS (phosh_splash_parent_class)->dispose (obj);
+}
+
+
+static void
+phosh_splash_constructed (GObject *object)
+{
+  PhoshSplash *self = PHOSH_SPLASH (object);
+  PhoshWayland *wl = phosh_wayland_get_default ();
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+  PhoshMonitor *monitor;
+
+  g_debug ("New splash for %s", g_app_info_get_id (priv->info));
+  monitor = phosh_shell_get_primary_monitor (phosh_shell_get_default ());
+
+  g_object_set (PHOSH_LAYER_SURFACE (self),
+                "layer-shell", phosh_wayland_get_zwlr_layer_shell_v1 (wl),
+                "wl-output", phosh_monitor_get_wl_output (monitor),
+                "anchor", ZWLR_LAYER_SURFACE_V1_ANCHOR_TOP |
+                ZWLR_LAYER_SURFACE_V1_ANCHOR_BOTTOM |
+                ZWLR_LAYER_SURFACE_V1_ANCHOR_LEFT |
+                ZWLR_LAYER_SURFACE_V1_ANCHOR_RIGHT,
+                "layer", ZWLR_LAYER_SHELL_V1_LAYER_TOP,
+                "kbd-interactivity", TRUE,
+                "exclusive-zone", 0,
+                "namespace", "phosh splash",
+                NULL);
+
+  G_OBJECT_CLASS (phosh_splash_parent_class)->constructed (object);
+}
+
+
+static gboolean
+phosh_splash_key_press_event (GtkWidget *self, GdkEventKey *event)
+{
+  gboolean handled = FALSE;
+
+  g_return_val_if_fail (PHOSH_IS_SPLASH (self), FALSE);
+
+  switch (event->keyval) {
+  case GDK_KEY_Escape:
+    g_signal_emit (self, signals[CLOSED], 0);
+    handled = TRUE;
+    break;
+  default:
+    /* nothing to do */
+    break;
+  }
+
+  return handled;
+}
+
+
+static void
+phosh_splash_show (GtkWidget *widget)
+{
+  PhoshSplash *self = PHOSH_SPLASH (widget);
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+  GIcon *icon;
+
+  icon = g_app_info_get_icon (priv->info);
+  if (G_UNLIKELY (icon == NULL)) {
+    gtk_image_set_from_icon_name (GTK_IMAGE (priv->img_app),
+                                  PHOSH_APP_UNKNOWN_ICON,
+                                  -1);
+  } else {
+    gtk_image_set_from_gicon (GTK_IMAGE (priv->img_app), icon, -1);
+  }
+
+  GTK_WIDGET_CLASS (phosh_splash_parent_class)->show (widget);
+}
+
+
+static void
+phosh_splash_class_init (PhoshSplashClass *klass)
+{
+  GObjectClass *object_class = (GObjectClass *)klass;
+  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
+
+  object_class->get_property = phosh_splash_get_property;
+  object_class->set_property = phosh_splash_set_property;
+  object_class->constructed = phosh_splash_constructed;
+  object_class->dispose = phosh_splash_dispose;
+  widget_class->show = phosh_splash_show;
+  widget_class->key_press_event = phosh_splash_key_press_event;
+
+  /**
+   * PhoshSplash:app:
+   *
+   * The appinfo this splash is for
+   */
+  props[PROP_APP_INFO] = g_param_spec_object ("app",
+                                              "",
+                                              "",
+                                              G_TYPE_DESKTOP_APP_INFO,
+                                              G_PARAM_CONSTRUCT_ONLY |
+                                              G_PARAM_READWRITE |
+                                              G_PARAM_STATIC_STRINGS);
+  g_object_class_install_properties (object_class, PROP_LAST_PROP, props);
+
+  /**
+   * PhoshSplay:closed:
+   *
+   * The splash should be closed
+   */
+  signals[CLOSED] = g_signal_new ("closed",
+                                  G_TYPE_FROM_CLASS (klass), G_SIGNAL_RUN_LAST, 0, NULL, NULL,
+                                  NULL, G_TYPE_NONE, 0);
+
+  gtk_widget_class_set_template_from_resource (widget_class,
+                                               "/sm/puri/phosh/ui/splash.ui");
+  gtk_widget_class_bind_template_child_private (widget_class, PhoshSplash, img_app);
+  gtk_widget_class_bind_template_child_private (widget_class, PhoshSplash, box);
+
+  gtk_widget_class_set_css_name (widget_class, "phosh-splash");
+}
+
+
+static void
+phosh_splash_init (PhoshSplash *self)
+{
+  PhoshSplashPrivate *priv = phosh_splash_get_instance_private (self);
+
+  gtk_widget_init_template (GTK_WIDGET (self));
+
+  gtk_widget_set_name (priv->box, "phosh-splash-content");
+
+  priv->timeout_id = g_timeout_add_seconds (SPLASH_TIMEOUT, on_splash_timeout, self);
+  g_source_set_name_by_id (priv->timeout_id, "[phosh] splash timeout");
+}
+
+
+GtkWidget *
+phosh_splash_new (GDesktopAppInfo *app)
+{
+  return g_object_new (PHOSH_TYPE_SPLASH, "app", app, NULL);
+}
diff --git a/src/splash.h b/src/splash.h
new file mode 100644
index 00000000..2e4c7ada
--- /dev/null
+++ b/src/splash.h
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+#pragma once
+
+#include <gtk/gtk.h>
+#include "layersurface.h"
+
+#include <gio/gdesktopappinfo.h>
+
+#define PHOSH_TYPE_SPLASH (phosh_splash_get_type ())
+
+G_DECLARE_DERIVABLE_TYPE (PhoshSplash, phosh_splash, PHOSH, SPLASH, PhoshLayerSurface)
+
+/**
+ * PhoshSplashClass
+ * @parent_class: The parent class
+ */
+struct _PhoshSplashClass {
+  PhoshLayerSurfaceClass parent_class;
+};
+
+
+GtkWidget *phosh_splash_new (GDesktopAppInfo *info);
diff --git a/src/stylesheet/adwaita-dark.css b/src/stylesheet/adwaita-dark.css
index 40f44873..dddaaad9 100644
--- a/src/stylesheet/adwaita-dark.css
+++ b/src/stylesheet/adwaita-dark.css
@@ -3,5 +3,7 @@
 @define-color phosh_fg_color white;
 @define-color phosh_bg_color black;
 @define-color phosh_notification_bg_color #282828;
+@define-color phosh_splash_bg_color #f6f5f4;
+@define-color phosh_splash_fg_color #282828;
 
 @import url("resource:///sm/puri/phosh/stylesheet/common.css");
diff --git a/src/stylesheet/adwaita-hc-light.css b/src/stylesheet/adwaita-hc-light.css
index 558508b8..7399d9c9 100644
--- a/src/stylesheet/adwaita-hc-light.css
+++ b/src/stylesheet/adwaita-hc-light.css
@@ -3,6 +3,8 @@
 @define-color phosh_fg_color black;
 @define-color phosh_bg_color white;
 @define-color phosh_notification_bg_color #e0e0e0;
+@define-color phosh_splash_bg_color @theme_bg_color;
+@define-color phosh_splash_fg_color @theme_fg_color;
 
 @import url("resource:///sm/puri/phosh/stylesheet/common.css");
 
diff --git a/src/stylesheet/common.css b/src/stylesheet/common.css
index a7cfe77a..8da52c3f 100644
--- a/src/stylesheet/common.css
+++ b/src/stylesheet/common.css
@@ -533,3 +533,23 @@ phosh-osd-window levelbar trough {
   border-width: 0px;
   padding: 0px;
 }
+
+/*
+ * Splash
+ */
+
+#phosh-splash-content {
+  background-color: @phosh_splash_bg_color;
+}
+
+#phosh-splash-content image {
+  -gtk-icon-shadow: 0 1px 2px rgba(0, 0, 0, 0.4), 0 1px 8px rgba(0, 0, 0, 0.2);
+}
+
+#phosh-splash-content spinner {
+  color: @phosh_splash_fg_color;
+}
+
+phosh-splash {
+  background-color: alpha(@theme_bg_color, 0.7);
+}
diff --git a/src/ui/splash.ui b/src/ui/splash.ui
new file mode 100644
index 00000000..f338469a
--- /dev/null
+++ b/src/ui/splash.ui
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.22.2 -->
+<interface>
+  <requires lib="gtk+" version="3.24"/>
+  <template class="PhoshSplash" parent="PhoshLayerSurface">
+    <child>
+      <object class="GtkBox" id="box">
+        <property name="visible">True</property>
+        <property name="orientation">vertical</property>
+        <property name="homogeneous">True</property>
+        <style>
+          <class name="phosh-splash"/>
+        </style>
+        <child>
+          <object class="GtkImage" id="img_app">
+            <property name="visible">True</property>
+            <property name="stock">gtk-missing-image</property>
+            <property name="pixel-size">176</property>
+            <property name="valign">end</property>
+            <property name="vexpand">True</property>
+          </object>
+        </child>
+        <child>
+          <object class="GtkSpinner">
+            <property name="visible">True</property>
+            <property name="active">True</property>
+            <property name="margin-top">24</property>
+            <property name="width-request">32</property>
+            <property name="height-request">32</property>
+            <property name="valign">start</property>
+            <property name="vexpand">True</property>
+          </object>
+        </child>
+      </object>
+    </child>
+  </template>
+</interface>
-- 
GitLab


From aa686728ee5068cd17ea4b9cdf00d714bccdc849 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 29 Jan 2021 14:57:06 +0100
Subject: [PATCH 05/15] Add marshalers list
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We want special marshalers for more complex signal arguments.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/meson.build           | 6 ++++++
 src/phosh-marshalers.list | 1 +
 2 files changed, 7 insertions(+)
 create mode 100644 src/phosh-marshalers.list

diff --git a/src/meson.build b/src/meson.build
index 7dddb07b..9b905f95 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -37,8 +37,14 @@ phosh_settings_sources = files(
   phosh_settings_widgets_sources,
 ]
 
+phosh_marshalers = gnome.genmarshal('phosh-marshalers',
+  sources : 'phosh-marshalers.list',
+  prefix : '_phosh_marshal',
+  valist_marshallers : true)
+
 libphosh_generated_sources = [
   phosh_enums,
+  phosh_marshalers,
   phosh_resources,
   wl_proto_sources,
   generated_dbus_sources,
diff --git a/src/phosh-marshalers.list b/src/phosh-marshalers.list
new file mode 100644
index 00000000..2093925d
--- /dev/null
+++ b/src/phosh-marshalers.list
@@ -0,0 +1 @@
+VOID:OBJECT,STRING
-- 
GitLab


From d01c6ad7ecb1073cd2f0d43cf9e7066a3a44643f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 29 Jan 2021 11:44:44 +0100
Subject: [PATCH 06/15] phosh-private: Update phosh-private protocol from phoc
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This gives us some more information when apps launch.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 protocol/phosh-private.xml | 76 +++++++++++++++++++++++++++++---------
 tools/doc-check            |  1 +
 2 files changed, 59 insertions(+), 18 deletions(-)

diff --git a/protocol/phosh-private.xml b/protocol/phosh-private.xml
index f67514ba..589cc1ac 100644
--- a/protocol/phosh-private.xml
+++ b/protocol/phosh-private.xml
@@ -1,5 +1,5 @@
 <protocol name="phosh">
-  <interface name="phosh_private" version="5">
+  <interface name="phosh_private" version="6">
     <description summary="Phone shell extensions">
       Private protocol between phosh and the compositor.
     </description>
@@ -9,10 +9,9 @@
              summary="an invalid argument was provided in a request"/>
     </enum>
 
-    <!-- only primary output for now -->
     <request name="rotate_display" since="1">
       <description summary="rotate output">
-        Rotate the output clockwise 0, 90, 180 or 270 degree.
+	This request is unused, ignore
       </description>
       <arg name="surface" type="object" interface="wl_surface"/>
       <arg name="degree" type="uint"/>
@@ -26,7 +25,7 @@
       <description summary="request a window thumbnail for a given toplevel">
         Allows to retrieve a window thumbnail image for a given foreign
         toplevel via wlr_screencopy protocol.
-        
+
         The thumbnail will be scaled down to the size provided by
         max_width and max_height arguments, preserving original aspect
         ratio. Pass 0 to leave it unconstrained.
@@ -48,6 +47,13 @@
       <arg name="id" type="new_id" interface="phosh_private_keyboard_event"/>
     </request>
 
+    <request name="get_startup_tracker" since="6">
+      <description summary="request a keyboard event handler">
+	Allows to track application startup.
+      </description>
+      <arg name="id" type="new_id" interface="phosh_private_startup_tracker"/>
+    </request>
+
   </interface>
 
   <interface name="phosh_private_keyboard_event" version="5">
@@ -125,13 +131,7 @@
   <!-- application switch/close handling -->
   <interface name="phosh_private_xdg_switcher" version="3">
     <description summary="Interface to list and raise xdg surfaces">
-      The interface is meant to list xdg surfaces (see the xdg-shell
-      stable wayland protocol) and to raise these surfaces to the top
-      of the window stack.
-
-      It's up to the compositor if it only lists surfaces of the
-      xdg-shell stable protocol or also surfaces using unstable versions of
-      the xdg-shell protocol.
+      This interface is unused, ignore.
     </description>
     <enum name="error">
       <entry name="invalid_argument" value="0"
@@ -139,9 +139,8 @@
     </enum>
 
     <request name="list_xdg_surfaces" since="2">
-      <description summary="Get current xdg surfaces">
-        Request to list xdg shell toplevels.
-      </description>
+      <description summary="Get current xdg surfaces"/>
+
     </request>
 
     <request name="destroy"  type="destructor" since="2">
@@ -149,8 +148,7 @@
     </request>
 
     <request name="raise_xdg_surface" since="2">
-      <description summary="raise the given xdg surface to the top of the stack">
-      </description>
+      <description summary="raise the given xdg surface to the top of the stack"/>
       <arg name="app_id" type="string" summary="The app_id of the xdg surface"/>
       <arg name="title" type="string" summary="The title of the xdg surface" allow-null="true"/>
     </request>
@@ -166,10 +164,52 @@
     </event>
 
     <request name="close_xdg_surface" since="3">
-      <description summary="close the given xdg surface">
-      </description>
+      <description summary="close the given xdg surface"/>
       <arg name="app_id" type="string" summary="The app_id of the xdg surface"/>
       <arg name="title" type="string" summary="The title of the xdg surface" allow-null="true"/>
     </request>
   </interface>
+
+  <!-- application startup tracking -->
+  <interface name="phosh_private_startup_tracker" version="6">
+    <description summary="Interface to track applicaation startup">
+      Allows shells to track application startup.
+    </description>
+
+    <enum name="flag" bitfield="true">
+      <entry name="none" value="0" summary="no flags"/>
+    </enum>
+
+    <enum name="protocol">
+      <entry name="unknown" value="0" summary="unknown protocol"/>
+      <entry name="x11" value="1" summary="x11 startup notification protocol"/>
+      <entry name="gtk_shell" value="2" summary="gtk_shell protocol"/>
+      <entry name="xdg_activation" value="3" summary="xdg_activation protocol"/>
+    </enum>
+
+    <event name="startup_id">
+      <description summary="Report a startup id">
+        This event indicates that the client sent it's startup id.
+        (which implies the app is running).
+      </description>
+      <arg name="startup_id" type="string" summary="The startup_id"/>
+      <arg name="protocol" type="uint" enum="protocol" summary="The protocol"/>
+      <arg name="flags" type="uint" enum="flags" summary="flags"/>
+    </event>
+
+    <event name="launched">
+      <description summary="Report an appplication launch">
+	This event indicates that the launcher spawned the app.
+      </description>
+      <arg name="startup_id" type="string" summary="The startup_id"/>
+      <arg name="protocol" type="uint" enum="protocol" summary="The protocol"/>
+      <arg name="flags" type="uint" enum="flags" summary="flags"/>
+    </event>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the startup_tracker interface instance">
+	The Client should invoke this when done using the interface.
+      </description>
+    </request>
+  </interface>
 </protocol>
diff --git a/tools/doc-check b/tools/doc-check
index 688da6aa..72547dbd 100755
--- a/tools/doc-check
+++ b/tools/doc-check
@@ -21,6 +21,7 @@ if ! grep -v -E '(^html/api-index-full.html)|(^./phosh-decl.txt)'\
 '|gamma_control_error|gamma_control_listener|org_kde_kwin_idle_timeout_listener'\
 '|phosh_private_error|phosh_private_keyboard_event_error'\
 '|phosh_private_keyboard_event_listener|phosh_private_xdg_switcher_error'\
+'|phosh_private_listener'\
 '|phosh_private_xdg_switcher_listener'\
 '|zwp_virtual_keyboard_manager_v1_error|zwp_virtual_keyboard_v1_error'\
 '|no link for: "NM(Connection|Client)"'\
-- 
GitLab


From 97331bc5048dc0fde2fe058fd3973d9a6f575fb4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 29 Jan 2021 11:44:44 +0100
Subject: [PATCH 07/15] phosh-private: Emit signals when we receive startup-ids
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This will allow other parts of the shell to track application
start.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/phosh-wayland.c | 58 ++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 57 insertions(+), 1 deletion(-)

diff --git a/src/phosh-wayland.c b/src/phosh-wayland.c
index ac444e44..4d9d33c5 100644
--- a/src/phosh-wayland.c
+++ b/src/phosh-wayland.c
@@ -32,6 +32,13 @@ enum {
 };
 static GParamSpec *props[PHOSH_WAYLAND_PROP_LAST_PROP];
 
+enum {
+  GTK_SHELL_SET_STARTUP_ID,
+  GTK_SHELL_NOTIFY_LAUNCH,
+  N_SIGNALS
+};
+static guint signals[N_SIGNALS];
+
 struct _PhoshWayland {
   GObject parent;
 
@@ -73,7 +80,7 @@ registry_handle_global (void *data,
       registry,
       name,
       &phosh_private_interface,
-      MIN(5, version));
+      MIN(6, version));
   } else if (!strcmp (interface, zwlr_layer_shell_v1_interface.name)) {
     self->layer_shell = wl_registry_bind (
       registry,
@@ -239,6 +246,38 @@ static const struct wl_seat_listener seat_listener =
 };
 
 
+static void
+phosh_private_handle_set_startup_id (void *data,
+                                     struct phosh_private *phosh_private,
+                                     const char *startup_id)
+{
+  PhoshWayland *wl = PHOSH_WAYLAND (data);
+
+  g_debug ("%s: %s", __func__, startup_id);
+  g_signal_emit (wl, signals[GTK_SHELL_SET_STARTUP_ID], 0, startup_id, NULL);
+}
+
+
+static void
+phosh_private_handle_notify_launch (void *data,
+                                    struct phosh_private *phosh_private,
+                                    const char *startup_id)
+{
+  PhoshWayland *wl = PHOSH_WAYLAND (data);
+
+  g_debug ("%s: %s", __func__, startup_id);
+  g_signal_emit (wl, signals[GTK_SHELL_NOTIFY_LAUNCH], 0, startup_id, NULL);
+}
+
+
+
+static const struct phosh_private_listener phosh_private_listener =
+{
+  phosh_private_handle_set_startup_id,
+  phosh_private_handle_notify_launch,
+};
+
+
 static void
 phosh_wayland_constructed (GObject *object)
 {
@@ -282,6 +321,7 @@ phosh_wayland_constructed (GObject *object)
   }
 
   wl_seat_add_listener (self->wl_seat, &seat_listener, self);
+  phosh_private_add_listener (self->phosh_private, &phosh_private_listener, self);
 }
 
 
@@ -322,6 +362,22 @@ phosh_wayland_class_init (PhoshWaylandClass *klass)
                         G_PARAM_READABLE | G_PARAM_EXPLICIT_NOTIFY | G_PARAM_STATIC_STRINGS);
 
   g_object_class_install_properties (object_class, PHOSH_WAYLAND_PROP_LAST_PROP, props);
+
+  signals[GTK_SHELL_NOTIFY_LAUNCH] = g_signal_new ("gtk-shell-notify-launch",
+                                                   G_TYPE_FROM_CLASS (klass),
+                                                   G_SIGNAL_RUN_LAST,
+                                                   0, NULL, NULL, NULL,
+                                                   G_TYPE_NONE,
+                                                   1,
+                                                   G_TYPE_STRING);
+
+  signals[GTK_SHELL_SET_STARTUP_ID] = g_signal_new ("gtk-shell-set-startup-id",
+                                                   G_TYPE_FROM_CLASS (klass),
+                                                   G_SIGNAL_RUN_LAST,
+                                                   0, NULL, NULL, NULL,
+                                                   G_TYPE_NONE,
+                                                   1,
+                                                   G_TYPE_STRING);
 }
 
 
-- 
GitLab


From d565c0b77ea38f1a1e1fcbe312d5dc4e399636a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Mon, 23 Aug 2021 18:25:13 +0200
Subject: [PATCH 08/15] phosh-wayland: Allow to retrieve phosh_private protocol
 version
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/phosh-wayland.c | 11 +++++++++++
 src/phosh-wayland.h |  1 +
 2 files changed, 12 insertions(+)

diff --git a/src/phosh-wayland.c b/src/phosh-wayland.c
index 4d9d33c5..d343006e 100644
--- a/src/phosh-wayland.c
+++ b/src/phosh-wayland.c
@@ -45,6 +45,7 @@ struct _PhoshWayland {
   struct gamma_control_manager *gamma_control_manager;
   struct org_kde_kwin_idle *idle_manager;
   struct phosh_private *phosh_private;
+  uint32_t phosh_private_version;
   struct zwp_virtual_keyboard_manager_v1 *zwp_virtual_keyboard_manager_v1;
   struct wl_display *display;
   struct wl_registry *registry;
@@ -81,6 +82,7 @@ registry_handle_global (void *data,
       name,
       &phosh_private_interface,
       MIN(6, version));
+    self->phosh_private_version = version;
   } else if (!strcmp (interface, zwlr_layer_shell_v1_interface.name)) {
     self->layer_shell = wl_registry_bind (
       registry,
@@ -464,6 +466,15 @@ phosh_wayland_get_phosh_private (PhoshWayland *self)
 }
 
 
+uint32_t
+phosh_wayland_get_phosh_private_version (PhoshWayland *self)
+{
+  g_return_val_if_fail (PHOSH_IS_WAYLAND (self), 0);
+
+  return self->phosh_private_version;
+}
+
+
 struct wl_shm*
 phosh_wayland_get_wl_shm (PhoshWayland *self)
 {
diff --git a/src/phosh-wayland.h b/src/phosh-wayland.h
index ddd13c99..96059129 100644
--- a/src/phosh-wayland.h
+++ b/src/phosh-wayland.h
@@ -54,6 +54,7 @@ gboolean                              phosh_wayland_has_wl_output  (PhoshWayland
 struct gamma_control_manager         *phosh_wayland_get_gamma_control_manager (PhoshWayland *self);
 struct org_kde_kwin_idle             *phosh_wayland_get_org_kde_kwin_idle (PhoshWayland *self);
 struct phosh_private                 *phosh_wayland_get_phosh_private (PhoshWayland *self);
+uint32_t                              phosh_wayland_get_phosh_private_version (PhoshWayland *self);
 struct wl_seat                       *phosh_wayland_get_wl_seat (PhoshWayland *self);
 struct wl_shm                        *phosh_wayland_get_wl_shm (PhoshWayland *self);
 struct xdg_wm_base                   *phosh_wayland_get_xdg_wm_base (PhoshWayland *self);
-- 
GitLab


From f39305650185ced71e4fe3267383dfda50bc76e1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 16 Sep 2021 20:58:39 +0200
Subject: [PATCH 09/15] wayland: Use defines instead of hard coding protocol
 versions
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We have multiple places where we check versions of phosh_private,
use proper defines for readability

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/keyboard-events.c    | 5 +++--
 src/phosh-wayland.h      | 5 +++++
 src/toplevel-thumbnail.c | 2 +-
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/src/keyboard-events.c b/src/keyboard-events.c
index 5616770a..f6b9bac5 100644
--- a/src/keyboard-events.c
+++ b/src/keyboard-events.c
@@ -165,11 +165,12 @@ initable_init (GInitable    *initable,
     return FALSE;
   }
 
-  if (phosh_private_get_version (phosh_private) < 5) {
+  if (phosh_private_get_version (phosh_private) < PHOSH_PRIVATE_KBD_EVENTS_SINCE) {
     g_warning ("Skipping grab manager due to mismatch of phosh_private protocol version");
     g_set_error (error,
                  G_IO_ERROR, G_IO_ERROR_FAILED,
-                 "Protocol version mismatch. Need 5, got %d",
+                 "Protocol version mismatch. Need %d, got %d",
+                 PHOSH_PRIVATE_KBD_EVENTS_SINCE,
                  phosh_private_get_version (phosh_private));
     return FALSE;
   }
diff --git a/src/phosh-wayland.h b/src/phosh-wayland.h
index 96059129..c6c6401a 100644
--- a/src/phosh-wayland.h
+++ b/src/phosh-wayland.h
@@ -43,6 +43,11 @@ typedef enum {
   PHOSH_WAYLAND_SEAT_CAPABILITY_TOUCH    = (1 << 2),
 } PhoshWaylandSeatCapabilities;
 
+/* Versions of phosh-private protocol that add certain features */
+#define PHOSH_PRIVATE_GET_THUMBNAIL_SINCE  4
+#define PHOSH_PRIVATE_KBD_EVENTS_SINCE     5
+#define PHOSH_PRIVATE_STARTUP_NOTIFY_SINCE 6
+
 #define PHOSH_TYPE_WAYLAND phosh_wayland_get_type()
 
 G_DECLARE_FINAL_TYPE (PhoshWayland, phosh_wayland, PHOSH, WAYLAND, GObject)
diff --git a/src/toplevel-thumbnail.c b/src/toplevel-thumbnail.c
index 6da983f0..33238af0 100644
--- a/src/toplevel-thumbnail.c
+++ b/src/toplevel-thumbnail.c
@@ -348,7 +348,7 @@ phosh_toplevel_thumbnail_new_from_toplevel (PhoshToplevel *toplevel, guint32 max
   struct phosh_private *phosh = phosh_wayland_get_phosh_private (phosh_wayland_get_default ());
   struct zwlr_screencopy_frame_v1 *frame;
 
-  if (!phosh || phosh_private_get_version (phosh) < 4)
+  if (!phosh || phosh_private_get_version (phosh) < PHOSH_PRIVATE_GET_THUMBNAIL_SINCE)
     return NULL;
 
   g_debug ("Requesting a %dx%d thumbnail for toplevel %p [%s]", max_width, max_height,
-- 
GitLab


From 7ab8d1b9077658809c490aaad179fd75239857b1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 28 Jan 2021 16:52:29 +0100
Subject: [PATCH 10/15] Add app-tracker
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This keeps track of spawned apps (via g_app_info) and corresponding
startup_id's (mostly via gtk_shell1 protcol).

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 docs/phosh-docs.xml       |   1 +
 src/app-tracker.c         | 546 ++++++++++++++++++++++++++++++++++++++
 src/app-tracker.h         |  23 ++
 src/meson.build           |   2 +
 src/phosh-wayland.c       |  56 ----
 src/shell.c               |  21 ++
 src/shell.h               |   2 +
 tests/meson.build         |   1 +
 tests/stubs/app-tracker.c |  32 +++
 tests/stubs/phosh.c       |   6 +
 tools/doc-check           |   2 +-
 tools/meson.build         |   1 +
 12 files changed, 636 insertions(+), 57 deletions(-)
 create mode 100644 src/app-tracker.c
 create mode 100644 src/app-tracker.h
 create mode 100644 tests/stubs/app-tracker.c

diff --git a/docs/phosh-docs.xml b/docs/phosh-docs.xml
index c20e8d0f..5ebc6d19 100644
--- a/docs/phosh-docs.xml
+++ b/docs/phosh-docs.xml
@@ -43,6 +43,7 @@
       <xi:include href="xml/app-grid-button.xml"/>
       <xi:include href="xml/app-grid.xml"/>
       <xi:include href="xml/app-list-model.xml"/>
+      <xi:include href="xml/app-tracker.xml"/>
       <xi:include href="xml/arrow.xml"/>
       <xi:include href="xml/auth.xml"/>
       <xi:include href="xml/background-manager.xml"/>
diff --git a/src/app-tracker.c b/src/app-tracker.c
new file mode 100644
index 00000000..ebb815cd
--- /dev/null
+++ b/src/app-tracker.c
@@ -0,0 +1,546 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Author: Guido Günther <agx@sigxcpu.org>
+ */
+
+#define G_LOG_DOMAIN "phosh-app-tracker"
+
+#include "config.h"
+
+#include "app-tracker.h"
+#include "phosh-wayland.h"
+#include "shell.h"
+#include "toplevel-manager.h"
+#include "phosh-marshalers.h"
+#include "util.h"
+
+#include <gtk/gtk.h>
+#include <gio/gio.h>
+#include <gio/gdesktopappinfo.h>
+
+/**
+ * SECTION:app-tracker
+ * @short_description: Application state tracker
+ * @Title: PhoshAppTracker
+ *
+ * Tracks the startup state of applications
+ */
+
+enum {
+  APP_LAUNCHED,
+  APP_READY,
+  APP_FAILED,
+  APP_ACTIVATED,
+  N_SIGNALS
+};
+static guint signals[N_SIGNALS];
+
+
+/**
+ * PhoshAppStateFlags:
+ *
+ * Application state based on startup id
+ *
+ * PHOSH_APP_TRACKER_STATE_FLAG_UNKNOWN: App state unknown
+ * PHOSH_APP_TRACKER_STATE_FLAG_LAUNCHED: process was spawned by us
+ *     Gio told us it spawned the process
+ * PHOSH_APP_TRACKER_STATE_FLAG_DBUS_LAUNCH: process launch seen on DBus via
+ *     org.gtk.gio.DesktopAppInfo
+ * PHOSH_APP_TRACKER_STATE_FLAG_WL_LAUNCH: startup id seen via gtk_shell1's notify_launch
+ *     Sent by launcher to indicate launch. GTK specific.
+ * PHOSH_APP_TRACKER_STATE_FLAG_WL_STARTUP_ID: startup id seen via gtk_shell1's set_startup_id
+ *     Sent by launchee. This indicates startup is complete. GTK specific.
+ */
+typedef enum {
+  PHOSH_APP_TRACKER_STATE_FLAG_UNKNOWN         = 0,
+  PHOSH_APP_TRACKER_STATE_FLAG_LAUNCHED        = (1 << 0),
+  PHOSH_APP_TRACKER_STATE_FLAG_DBUS_LAUNCH     = (1 << 1),
+  PHOSH_APP_TRACKER_STATE_FLAG_WL_LAUNCH       = (1 << 2),
+  PHOSH_APP_TRACKER_STATE_FLAG_WL_STARTUP_ID   = (1 << 3),
+} PhoshAppStateFlags;
+
+typedef struct  {
+  gint64             pid;
+  PhoshAppStateFlags state;
+
+  gchar             *startup_id;
+  GDesktopAppInfo   *info;
+} PhoshAppState;
+
+struct _PhoshAppTracker {
+  GObject          parent;
+
+  GDBusConnection *session_bus;
+  guint            dbus_id;
+  guint            idle_id;
+  struct phosh_private_startup_tracker *wl_tracker; /* PhoshPrivate wayland interface */
+  GHashTable      *apps;
+};
+G_DEFINE_TYPE (PhoshAppTracker, phosh_app_tracker, G_TYPE_OBJECT)
+
+
+static PhoshAppState *
+phosh_app_state_new (GDesktopAppInfo   *info,
+                     const char        *startup_id,
+                     gint64             pid,
+                     PhoshAppStateFlags flags)
+{
+  PhoshAppState *state = g_new0 (PhoshAppState, 1);
+
+  state->startup_id = g_strdup (startup_id);
+  state->pid = pid;
+  state->state = flags;
+  state->info = g_object_ref (info);
+
+  g_debug ("Pid %" G_GINT64_FORMAT ", '%s', startup-id: %s got state %d",
+           state->pid,
+           g_app_info_get_name (G_APP_INFO (info)),
+           state->startup_id,
+           state->state);
+
+  return state;
+}
+
+
+static void
+phosh_app_state_free (PhoshAppState *state)
+{
+  g_object_unref (state->info);
+  g_free (state->startup_id);
+
+  g_free (state);
+}
+
+
+static PhoshAppState*
+update_app_state (PhoshAppTracker   *self,
+                  const char        *startup_id,
+                  PhoshAppStateFlags flags)
+{
+  PhoshAppState *state;
+
+  state = g_hash_table_lookup (self->apps, startup_id);
+  g_return_val_if_fail (state, NULL);
+
+  g_debug ("Pid %" G_GINT64_FORMAT ", startup-id: %s got state %d",
+           state->pid,
+           state->startup_id,
+           flags);
+
+  state->state |= flags;
+
+  return state;
+}
+
+
+static void
+startup_tracker_handle_launched (void                                 *data,
+                                 struct phosh_private_startup_tracker *startup_tracker,
+                                 const char                           *startup_id,
+                                 unsigned int                          protocol,
+                                 unsigned int                          flags)
+{
+  PhoshAppState *state;
+  PhoshAppTracker *self = PHOSH_APP_TRACKER (data);
+
+  g_debug ("%s %s %d", __func__, startup_id, protocol);
+  g_return_if_fail (PHOSH_IS_APP_TRACKER (self));
+  g_return_if_fail (startup_id != NULL);
+
+  state = g_hash_table_lookup (self->apps, startup_id);
+  /*
+   * TODO: this can be dropped once
+   * https://gitlab.gnome.org/GNOME/glib/-/merge_requests/2227
+   * is applied or another solution is in place for DBus activated
+   * apps.
+   */
+  if (!state) {
+    g_debug ("No info for startup_id '%s' found", startup_id);
+    return;
+  }
+
+  update_app_state (self, startup_id, PHOSH_APP_TRACKER_STATE_FLAG_WL_LAUNCH);
+}
+
+
+static void
+startup_tracker_handle_startup_id (void                                 *data,
+                                   struct phosh_private_startup_tracker *startup_tracker,
+                                   const char                           *startup_id,
+                                   unsigned int                          protocol,
+                                   unsigned int                          flags)
+
+{
+  PhoshAppState *state;
+  PhoshAppTracker *self = PHOSH_APP_TRACKER (data);
+
+  g_debug ("%s %s %d", __func__, startup_id, protocol);
+  g_return_if_fail (PHOSH_IS_APP_TRACKER (self));
+  g_return_if_fail (startup_id != NULL);
+
+  state = g_hash_table_lookup (self->apps, startup_id);
+  /* Apps often reuse the the startup_id for multiple windows */
+  if (!state) {
+    g_debug ("No info for startup_id '%s' found", startup_id);
+    return;
+  }
+
+  update_app_state (self, startup_id, PHOSH_APP_TRACKER_STATE_FLAG_WL_STARTUP_ID);
+  g_signal_emit (self, signals[APP_READY], 0, state->info, startup_id);
+
+  /* Startup sequence done */
+  g_hash_table_remove (self->apps, startup_id);
+}
+
+
+static const struct phosh_private_startup_tracker_listener startup_tracker_listener = {
+  .startup_id = startup_tracker_handle_startup_id,
+  .launched = startup_tracker_handle_launched,
+};
+
+
+static void
+on_app_launched (PhoshAppTracker   *self,
+                 GDesktopAppInfo   *info,
+                 GVariant          *platform_data,
+                 GAppLaunchContext *context)
+{
+  g_autofree gchar *startup_id = NULL;
+  PhoshAppState *state;
+  gint32 pid;
+
+  g_return_if_fail (G_IS_DESKTOP_APP_INFO (info));
+  /*
+   * We can't do anything useful if the compositor doesn't send events
+   * so make sure the user is aware.
+   */
+  g_return_if_fail (self->wl_tracker);
+
+  /* Application doesn't handle startup notifications */
+  if (!g_desktop_app_info_get_boolean (info, "StartupNotify"))
+    return;
+
+  /* Launched via spawn */
+  g_variant_lookup (platform_data, "startup-notification-id", "s", &startup_id);
+  g_variant_lookup (platform_data, "pid", "i", &pid);
+
+  /* No startup_id for e.g. Qt apps */
+  if (!startup_id) {
+    g_debug ("No startup_id for %s", g_app_info_get_id (G_APP_INFO (info)));
+    return;
+  }
+
+  g_return_if_fail (startup_id);
+  /* If we saw the startup-id already, something is wrong */
+  g_return_if_fail (!g_hash_table_contains (self->apps, startup_id));
+
+  state = phosh_app_state_new (info, startup_id, pid, PHOSH_APP_TRACKER_STATE_FLAG_LAUNCHED);
+  g_hash_table_insert (self->apps, g_steal_pointer (&startup_id), state);
+
+  g_debug ("Launched app '%s' with Startup id: '%s'",
+           g_app_info_get_name (G_APP_INFO (info)),
+           state->startup_id);
+
+  g_signal_emit (self, signals[APP_LAUNCHED],
+                 g_quark_from_static_string ("spawn"),
+                 info,
+                 state->startup_id);
+}
+
+
+static void
+on_app_launch_failed (PhoshAppTracker   *self,
+                      char              *startup_id,
+                      GAppLaunchContext *context)
+{
+  /* currently never emitted in glib */
+  g_warning ("Failed to launch app with startup-id %s", startup_id);
+}
+
+
+static void
+on_dbus_app_launched (GDBusConnection *connection,
+                      const char      *sender_name,
+                      const char      *object_path,
+                      const char      *interface_name,
+                      const char      *signal_name,
+                      GVariant        *parameters,
+                      PhoshAppTracker *self)
+{
+  gint64 pid;
+
+  g_autoptr (GVariant) var_dict = NULL, var_desktop_file = NULL;
+  g_autofree char *startup_id = NULL;
+  const char *desktop_file = NULL;
+  GVariantDict dict;
+
+  g_return_if_fail (PHOSH_IS_APP_TRACKER (self));
+  /*
+   * We can't do anything useful if the compositor doesn't send events
+   * so make sure the user is aware.
+   */
+  g_return_if_fail (self->wl_tracker);
+
+  g_variant_get (parameters, "(@aysxas@a{sv})", &var_desktop_file, NULL, &pid, NULL, &var_dict);
+
+  desktop_file = g_variant_get_bytestring (var_desktop_file);
+
+  if (desktop_file == NULL || *desktop_file == '\0')
+    return;
+
+  g_variant_dict_init (&dict, var_dict);
+  g_variant_dict_lookup (&dict, "startup-id", "s", &startup_id);
+
+  if (!startup_id)
+    return;
+
+  if (g_hash_table_contains (self->apps, startup_id)) {
+    /* App already known, likely launched by us */
+    g_debug ("'%s' (%s) already known", startup_id, desktop_file);
+    update_app_state (self, startup_id, PHOSH_APP_TRACKER_STATE_FLAG_DBUS_LAUNCH);
+  } else {
+    GDesktopAppInfo *info;
+    PhoshAppState *state;
+    g_autofree char *app_id = g_path_get_basename (desktop_file);
+
+    info = g_desktop_app_info_new (app_id);
+    if (!info) {
+      g_debug ("No desktop file for '%s'", app_id);
+      return;
+    }
+
+    g_debug ("DBus launch %s startup-id %s", desktop_file, startup_id);
+    state = phosh_app_state_new (info, startup_id, pid, PHOSH_APP_TRACKER_STATE_FLAG_DBUS_LAUNCH);
+    g_hash_table_insert (self->apps, g_steal_pointer (&startup_id), state);
+
+    g_signal_emit (self, signals[APP_LAUNCHED],
+                   g_quark_from_static_string ("gio-dbus"),
+                   info,
+                   state->startup_id);
+
+  }
+}
+
+
+static void
+on_bus_get_finished (GObject         *source_object,
+                     GAsyncResult    *res,
+                     PhoshAppTracker *self)
+{
+  g_autoptr (GError) err = NULL;
+  GDBusConnection *session_bus;
+
+  session_bus = g_bus_get_finish (res, &err);
+  if (!session_bus) {
+    g_warning ("Failed to attach to session bus: %s", err->message);
+    return;
+  }
+  self->session_bus = session_bus;
+
+  /* Listen for spawned apps */
+  self->dbus_id = g_dbus_connection_signal_subscribe (self->session_bus,
+                                                      NULL,
+                                                      "org.gtk.gio.DesktopAppInfo",
+                                                      "Launched",
+                                                      "/org/gtk/gio/DesktopAppInfo",
+                                                      NULL,
+                                                      G_DBUS_SIGNAL_FLAGS_NONE,
+                                                      (GDBusSignalCallback)on_dbus_app_launched,
+                                                      self, NULL);
+}
+
+
+static gboolean
+on_idle (PhoshAppTracker *self)
+{
+  g_bus_get (G_BUS_TYPE_SESSION,
+             NULL,
+             (GAsyncReadyCallback)on_bus_get_finished,
+             self);
+
+  self->idle_id = 0;
+  return G_SOURCE_REMOVE;
+}
+
+
+static void
+phosh_app_tracker_finalize (GObject *object)
+{
+  PhoshAppTracker *self = PHOSH_APP_TRACKER (object);
+
+  g_clear_pointer (&self->apps, g_hash_table_destroy);
+  g_clear_pointer (&self->wl_tracker, phosh_private_startup_tracker_destroy);
+
+  g_clear_handle_id (&self->idle_id, g_source_remove);
+  if (self->dbus_id) {
+    g_dbus_connection_signal_unsubscribe (self->session_bus, self->dbus_id);
+    self->dbus_id = 0;
+  }
+  g_clear_object (&self->session_bus);
+
+
+  G_OBJECT_CLASS (phosh_app_tracker_parent_class)->finalize (object);
+}
+
+
+static void
+phosh_app_tracker_class_init (PhoshAppTrackerClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->finalize = phosh_app_tracker_finalize;
+
+  /**
+   * PhoshAppTracker:app-launched
+   *
+   * The app was launched by the shell.
+   */
+  signals[APP_LAUNCHED] = g_signal_new ("app-launched",
+                                        G_TYPE_FROM_CLASS (klass),
+                                        G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED,
+                                        0, NULL, NULL,
+                                        _phosh_marshal_VOID__OBJECT_STRING,
+                                        G_TYPE_NONE,
+                                        2,
+                                        G_TYPE_APP_INFO,
+                                        G_TYPE_STRING);
+  g_signal_set_va_marshaller (signals[APP_LAUNCHED],
+                              G_TYPE_FROM_CLASS (klass),
+                              _phosh_marshal_VOID__OBJECT_STRINGv);
+  /**
+   * PhoshAppTracker:app-ready
+   *
+   * The app is ready to be used by the user
+   */
+  signals[APP_READY] = g_signal_new ("app-ready",
+                                     G_TYPE_FROM_CLASS (klass),
+                                     G_SIGNAL_RUN_LAST,
+                                     0, NULL, NULL,
+                                     _phosh_marshal_VOID__OBJECT_STRING,
+                                     G_TYPE_NONE,
+                                     2,
+                                     G_TYPE_APP_INFO,
+                                     G_TYPE_STRING);
+  g_signal_set_va_marshaller (signals[APP_READY],
+                              G_TYPE_FROM_CLASS (klass),
+                              _phosh_marshal_VOID__OBJECT_STRINGv);
+
+  /**
+   * PhoshAppTracker:app-failed
+   *
+   * The app failed to launch
+   */
+  signals[APP_FAILED] = g_signal_new ("app-failed",
+                                      G_TYPE_FROM_CLASS (klass),
+                                      G_SIGNAL_RUN_LAST,
+                                      0, NULL, NULL,
+                                      _phosh_marshal_VOID__OBJECT_STRING,
+                                      G_TYPE_NONE,
+                                      2,
+                                      G_TYPE_APP_INFO,
+                                      G_TYPE_STRING);
+  g_signal_set_va_marshaller (signals[APP_FAILED],
+                              G_TYPE_FROM_CLASS (klass),
+                              _phosh_marshal_VOID__OBJECT_STRINGv);
+  /**
+   * PhoshAppTracker:app-activated
+   *
+   * Already running app was activated
+   */
+  signals[APP_ACTIVATED] = g_signal_new ("app-activated",
+                                         G_TYPE_FROM_CLASS (klass),
+                                         G_SIGNAL_RUN_LAST,
+                                         0, NULL, NULL, NULL,
+                                         G_TYPE_NONE,
+                                         1,
+                                         G_TYPE_APP_INFO);
+}
+
+
+static void
+phosh_app_tracker_init (PhoshAppTracker *self)
+{
+  PhoshWayland *wl = phosh_wayland_get_default ();
+  struct phosh_private *phosh_private = phosh_wayland_get_phosh_private (wl);
+  uint32_t version;
+
+  self->apps = g_hash_table_new_full (g_str_hash,
+                                      g_str_equal,
+                                      g_free,
+                                      (GDestroyNotify) phosh_app_state_free);
+  self->idle_id = g_idle_add ((GSourceFunc)on_idle, self);
+
+  version = phosh_wayland_get_phosh_private_version (wl);
+  if (!phosh_private || version < PHOSH_PRIVATE_STARTUP_NOTIFY_SINCE) {
+    g_warning ("Compositor lacks app startup tracker support");
+    return;
+  }
+
+  if ((self->wl_tracker = phosh_private_get_startup_tracker (phosh_private)) == NULL) {
+    g_critical ("Failed to retrieve startup tracker from wayland interface");
+    return;
+  }
+
+  phosh_private_startup_tracker_add_listener (self->wl_tracker, &startup_tracker_listener, self);
+}
+
+
+PhoshAppTracker *
+phosh_app_tracker_new (void)
+{
+  return PHOSH_APP_TRACKER (g_object_new (PHOSH_TYPE_APP_TRACKER, NULL));
+}
+
+void
+phosh_app_tracker_launch_app_info (PhoshAppTracker *self, GAppInfo *info)
+{
+  g_autoptr (GdkAppLaunchContext) context = NULL;
+  g_autoptr (GError) error = NULL;
+  PhoshToplevelManager *toplevel_manager = phosh_shell_get_toplevel_manager (phosh_shell_get_default ());
+  g_autofree char *app_id = NULL;
+  g_autofree gchar *startup_id = NULL;
+  gboolean success;
+
+  app_id = phosh_strip_suffix_from_app_id (g_app_info_get_id (G_APP_INFO (info)));
+  g_debug ("Launching '%s'", app_id);
+
+  for (guint i=0; i < phosh_toplevel_manager_get_num_toplevels (toplevel_manager); i++) {
+    PhoshToplevel *toplevel = phosh_toplevel_manager_get_toplevel (toplevel_manager, i);
+    const char *window_id = phosh_toplevel_get_app_id (toplevel);
+    g_autofree char *fixed_id = phosh_fix_app_id (window_id);
+
+    if (g_strcmp0 (app_id, window_id) == 0 || g_strcmp0 (app_id, fixed_id) == 0) {
+      /* activate the first matching window for now, since we don't have toplevels sorted by last-focus yet */
+      phosh_toplevel_activate (toplevel, phosh_wayland_get_wl_seat (phosh_wayland_get_default ()));
+      g_signal_emit (self, signals[APP_ACTIVATED], 0, info);
+      return;
+    }
+  }
+
+  context = gdk_display_get_app_launch_context (gdk_display_get_default ());
+  g_object_ref (context);
+  g_signal_connect_swapped (G_APP_LAUNCH_CONTEXT (context),
+                            "launched",
+                            G_CALLBACK (on_app_launched),
+                            self);
+  g_signal_connect_swapped (G_APP_LAUNCH_CONTEXT (context),
+                            "launch-failed",
+                            G_CALLBACK (on_app_launch_failed),
+                            self);
+
+  success = g_desktop_app_info_launch_uris_as_manager (G_DESKTOP_APP_INFO (info),
+                                                       NULL,
+                                                       G_APP_LAUNCH_CONTEXT (context),
+                                                       G_SPAWN_SEARCH_PATH,
+                                                       NULL, NULL,
+                                                       NULL, NULL,
+                                                       &error);
+  if (!success) {
+    g_critical ("Failed to launch app %s: %s",
+                g_app_info_get_id (info),
+                error->message);
+  }
+}
diff --git a/src/app-tracker.h b/src/app-tracker.h
new file mode 100644
index 00000000..b880c328
--- /dev/null
+++ b/src/app-tracker.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+#pragma once
+
+#include <glib-object.h>
+#include <gio/gio.h>
+#include <gio/gdesktopappinfo.h>
+
+G_BEGIN_DECLS
+
+#define PHOSH_TYPE_APP_TRACKER (phosh_app_tracker_get_type ())
+
+G_DECLARE_FINAL_TYPE (PhoshAppTracker, phosh_app_tracker, PHOSH, APP_TRACKER, GObject)
+
+PhoshAppTracker *phosh_app_tracker_new (void);
+void phosh_app_tracker_launch_app_info (PhoshAppTracker *self,
+                                        GAppInfo        *info);
+
+G_END_DECLS
diff --git a/src/meson.build b/src/meson.build
index 9b905f95..d47fe525 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -141,6 +141,8 @@ libphosh_sources = files(
   'app-auth-prompt.h',
   'arrow.c',
   'arrow.h',
+  'app-tracker.h',
+  'app-tracker.c',
   'auth.c',
   'auth.h',
   'background-manager.c',
diff --git a/src/phosh-wayland.c b/src/phosh-wayland.c
index d343006e..50663912 100644
--- a/src/phosh-wayland.c
+++ b/src/phosh-wayland.c
@@ -32,13 +32,6 @@ enum {
 };
 static GParamSpec *props[PHOSH_WAYLAND_PROP_LAST_PROP];
 
-enum {
-  GTK_SHELL_SET_STARTUP_ID,
-  GTK_SHELL_NOTIFY_LAUNCH,
-  N_SIGNALS
-};
-static guint signals[N_SIGNALS];
-
 struct _PhoshWayland {
   GObject parent;
 
@@ -248,38 +241,6 @@ static const struct wl_seat_listener seat_listener =
 };
 
 
-static void
-phosh_private_handle_set_startup_id (void *data,
-                                     struct phosh_private *phosh_private,
-                                     const char *startup_id)
-{
-  PhoshWayland *wl = PHOSH_WAYLAND (data);
-
-  g_debug ("%s: %s", __func__, startup_id);
-  g_signal_emit (wl, signals[GTK_SHELL_SET_STARTUP_ID], 0, startup_id, NULL);
-}
-
-
-static void
-phosh_private_handle_notify_launch (void *data,
-                                    struct phosh_private *phosh_private,
-                                    const char *startup_id)
-{
-  PhoshWayland *wl = PHOSH_WAYLAND (data);
-
-  g_debug ("%s: %s", __func__, startup_id);
-  g_signal_emit (wl, signals[GTK_SHELL_NOTIFY_LAUNCH], 0, startup_id, NULL);
-}
-
-
-
-static const struct phosh_private_listener phosh_private_listener =
-{
-  phosh_private_handle_set_startup_id,
-  phosh_private_handle_notify_launch,
-};
-
-
 static void
 phosh_wayland_constructed (GObject *object)
 {
@@ -323,7 +284,6 @@ phosh_wayland_constructed (GObject *object)
   }
 
   wl_seat_add_listener (self->wl_seat, &seat_listener, self);
-  phosh_private_add_listener (self->phosh_private, &phosh_private_listener, self);
 }
 
 
@@ -364,22 +324,6 @@ phosh_wayland_class_init (PhoshWaylandClass *klass)
                         G_PARAM_READABLE | G_PARAM_EXPLICIT_NOTIFY | G_PARAM_STATIC_STRINGS);
 
   g_object_class_install_properties (object_class, PHOSH_WAYLAND_PROP_LAST_PROP, props);
-
-  signals[GTK_SHELL_NOTIFY_LAUNCH] = g_signal_new ("gtk-shell-notify-launch",
-                                                   G_TYPE_FROM_CLASS (klass),
-                                                   G_SIGNAL_RUN_LAST,
-                                                   0, NULL, NULL, NULL,
-                                                   G_TYPE_NONE,
-                                                   1,
-                                                   G_TYPE_STRING);
-
-  signals[GTK_SHELL_SET_STARTUP_ID] = g_signal_new ("gtk-shell-set-startup-id",
-                                                   G_TYPE_FROM_CLASS (klass),
-                                                   G_SIGNAL_RUN_LAST,
-                                                   0, NULL, NULL, NULL,
-                                                   G_TYPE_NONE,
-                                                   1,
-                                                   G_TYPE_STRING);
 }
 
 
diff --git a/src/shell.c b/src/shell.c
index 0b0c6897..2dc676b1 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -25,6 +25,7 @@
 
 #include "config.h"
 #include "shell.h"
+#include "app-tracker.h"
 #include "batteryinfo.h"
 #include "background-manager.h"
 #include "bt-info.h"
@@ -65,6 +66,7 @@
 #include "screen-saver-manager.h"
 #include "screenshot-manager.h"
 #include "session-manager.h"
+#include "splash-manager.h"
 #include "system-prompter.h"
 #include "top-panel.h"
 #include "torch-manager.h"
@@ -111,6 +113,7 @@ typedef struct
 
   GtkWidget *notification_banner;
 
+  PhoshAppTracker *app_tracker;
   PhoshSessionManager *session_manager;
   PhoshBackgroundManager *background_manager;
   PhoshCallsManager *calls_manager;
@@ -138,6 +141,7 @@ typedef struct
   PhoshKeyboardEvents *keyboard_events;
   PhoshLocationManager *location_manager;
   PhoshGnomeShellManager *gnome_shell_manager;
+  PhoshSplashManager *splash_manager;
 
   /* sensors */
   PhoshSensorProxyManager *sensor_proxy_manager;
@@ -345,6 +349,7 @@ phosh_shell_dispose (GObject *object)
   g_clear_object (&priv->notification_banner);
 
   /* dispose managers in opposite order of declaration */
+  g_clear_object (&priv->splash_manager);
   g_clear_object (&priv->screenshot_manager);
   g_clear_object (&priv->calls_manager);
   g_clear_object (&priv->location_manager);
@@ -371,6 +376,7 @@ phosh_shell_dispose (GObject *object)
   g_clear_object (&priv->primary_monitor);
   g_clear_object (&priv->background_manager);
   g_clear_object (&priv->keyboard_events);
+  g_clear_object (&priv->app_tracker);
 
   /* sensors */
   g_clear_object (&priv->proximity);
@@ -467,6 +473,7 @@ setup_idle_cb (PhoshShell *self)
   g_autoptr (GError) err = NULL;
   PhoshShellPrivate *priv = phosh_shell_get_instance_private (self);
 
+  priv->app_tracker = phosh_app_tracker_new ();
   priv->session_manager = phosh_session_manager_new ();
   priv->mode_manager = phosh_mode_manager_new ();
 
@@ -520,6 +527,7 @@ setup_idle_cb (PhoshShell *self)
 
   priv->gnome_shell_manager = phosh_gnome_shell_manager_get_default ();
   priv->screenshot_manager = phosh_screenshot_manager_new ();
+  priv->splash_manager = phosh_splash_manager_new (priv->app_tracker);
 
   priv->startup_finished = TRUE;
   g_signal_emit (self, signals[READY], 0);
@@ -885,6 +893,19 @@ phosh_shell_get_primary_monitor (PhoshShell *self)
 
 /* Manager getters */
 
+PhoshAppTracker *
+phosh_shell_get_app_tracker (PhoshShell *self)
+{
+  PhoshShellPrivate *priv;
+
+  g_return_val_if_fail (PHOSH_IS_SHELL (self), NULL);
+  priv = phosh_shell_get_instance_private (self);
+  g_return_val_if_fail (PHOSH_IS_APP_TRACKER (priv->app_tracker), NULL);
+
+  return priv->app_tracker;
+}
+
+
 PhoshBackgroundManager *
 phosh_shell_get_background_manager (PhoshShell *self)
 {
diff --git a/src/shell.h b/src/shell.h
index 64f6636c..8fa1e16a 100644
--- a/src/shell.h
+++ b/src/shell.h
@@ -8,6 +8,7 @@
 
 #pragma once
 
+#include "app-tracker.h"
 #include "background-manager.h"
 #include "bt-manager.h"
 #include "calls-manager.h"
@@ -74,6 +75,7 @@ PhoshMonitor        *phosh_shell_get_primary_monitor (PhoshShell *self);
 PhoshMonitor        *phosh_shell_get_builtin_monitor (PhoshShell *self);
 
 /* Created by the shell on startup */
+PhoshAppTracker        *phosh_shell_get_app_tracker        (PhoshShell *self);
 PhoshBackgroundManager *phosh_shell_get_background_manager (PhoshShell *self);
 PhoshCallsManager      *phosh_shell_get_calls_manager (PhoshShell *self);
 PhoshFeedbackManager   *phosh_shell_get_feedback_manager   (PhoshShell *self);
diff --git a/tests/meson.build b/tests/meson.build
index 137dda34..67b139ea 100644
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -39,6 +39,7 @@ test_link_args = [
 # Deps for all tests
 test_stub_deps = [
   'stubs/phosh.c',
+  'stubs/app-tracker.c',
   'stubs/lockscreen-manager.c',
   'stubs/toplevel.c',
   'stubs/toplevel-manager.c',
diff --git a/tests/stubs/app-tracker.c b/tests/stubs/app-tracker.c
new file mode 100644
index 00000000..7a61085c
--- /dev/null
+++ b/tests/stubs/app-tracker.c
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Author: Guido Günther <agx@sigxcpu.org>
+ */
+
+#include "app-tracker.h"
+
+struct _PhoshAppTracker {
+  GObject parent;
+};
+
+G_DEFINE_TYPE (PhoshAppTracker, phosh_app_tracker, G_TYPE_OBJECT);
+
+static void
+phosh_app_tracker_class_init (PhoshAppTrackerClass *klass)
+{
+}
+
+
+static void
+phosh_app_tracker_init (PhoshAppTracker *self)
+{
+}
+
+void
+phosh_app_tracker_launch_app_info (PhoshAppTracker *self,
+                                   GAppInfo        *info)
+{
+}
diff --git a/tests/stubs/phosh.c b/tests/stubs/phosh.c
index a22aa505..bdf0c332 100644
--- a/tests/stubs/phosh.c
+++ b/tests/stubs/phosh.c
@@ -61,6 +61,12 @@ phosh_shell_get_locked (PhoshShell *self)
   return FALSE;
 }
 
+PhoshAppTracker *
+phosh_shell_get_app_tracker (PhoshShell *self)
+{
+  return NULL;
+}
+
 PhoshLockscreenManager *
 phosh_shell_get_lockscreen_manager (PhoshShell *self)
 {
diff --git a/tools/doc-check b/tools/doc-check
index 72547dbd..866828cf 100755
--- a/tools/doc-check
+++ b/tools/doc-check
@@ -21,7 +21,7 @@ if ! grep -v -E '(^html/api-index-full.html)|(^./phosh-decl.txt)'\
 '|gamma_control_error|gamma_control_listener|org_kde_kwin_idle_timeout_listener'\
 '|phosh_private_error|phosh_private_keyboard_event_error'\
 '|phosh_private_keyboard_event_listener|phosh_private_xdg_switcher_error'\
-'|phosh_private_listener'\
+'|phosh_private_startup_'\
 '|phosh_private_xdg_switcher_listener'\
 '|zwp_virtual_keyboard_manager_v1_error|zwp_virtual_keyboard_v1_error'\
 '|no link for: "NM(Connection|Client)"'\
diff --git a/tools/meson.build b/tools/meson.build
index 4af00a18..cb711193 100644
--- a/tools/meson.build
+++ b/tools/meson.build
@@ -5,6 +5,7 @@ configure_file(
 
 stubs = [
   '../tests/stubs/phosh.c',
+  '../tests/stubs/app-tracker.c',
   '../tests/stubs/lockscreen-manager.c',
   '../tests/stubs/toplevel.c',
   '../tests/stubs/toplevel-manager.c',
-- 
GitLab


From b7e8d74eda8d3fb881627186843fb1f1c0080f4e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 19 Aug 2021 15:33:22 +0200
Subject: [PATCH 11/15] app-grid-button: Use app-tracker for app launching
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

A button shouldn't care about the details of app launching. Let
the app-tracker handle that.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/app-grid-button.c | 41 ++++-------------------------------------
 1 file changed, 4 insertions(+), 37 deletions(-)

diff --git a/src/app-grid-button.c b/src/app-grid-button.c
index 8c3cb39b..0f70be91 100644
--- a/src/app-grid-button.c
+++ b/src/app-grid-button.c
@@ -7,11 +7,11 @@
 #define G_LOG_DOMAIN "phosh-app-grid-button"
 
 #include "config.h"
+#include "app-tracker.h"
 #include "app-grid-button.h"
 #include "phosh-enums.h"
 #include "favorite-list-model.h"
 
-#include "toplevel-manager.h"
 #include "shell.h"
 #include "util.h"
 
@@ -164,45 +164,12 @@ phosh_app_grid_button_button_press_event (GtkWidget      *self,
 static void
 activate_cb (PhoshAppGridButton *self)
 {
+  PhoshAppTracker *app_tracker = phosh_shell_get_app_tracker (phosh_shell_get_default ());
   PhoshAppGridButtonPrivate *priv = phosh_app_grid_button_get_instance_private (self);
-  g_autoptr (GdkAppLaunchContext) context = NULL;
-  g_autoptr (GError) error = NULL;
-  PhoshToplevelManager *toplevel_manager = phosh_shell_get_toplevel_manager (phosh_shell_get_default ());
-  g_autofree char *app_id = g_strdup (g_app_info_get_id (G_APP_INFO (priv->info)));
-
-  g_debug ("Launching %s", app_id);
-
-  /* strip ".desktop" suffix */
-  if (app_id && g_str_has_suffix (app_id, ".desktop")) {
-    *(app_id + strlen (app_id) - strlen (".desktop")) = '\0';
-  }
-
-  for (guint i=0; i < phosh_toplevel_manager_get_num_toplevels (toplevel_manager); i++) {
-    PhoshToplevel *toplevel = phosh_toplevel_manager_get_toplevel (toplevel_manager, i);
-    const char *window_id = phosh_toplevel_get_app_id (toplevel);
-    g_autofree char *fixed_id = phosh_fix_app_id (window_id);
-
-    if (g_strcmp0 (app_id, window_id) == 0 || g_strcmp0 (app_id, fixed_id) == 0) {
-      /* activate the first matching window for now, since we don't have toplevels sorted by last-focus yet */
-      phosh_toplevel_activate (toplevel, phosh_wayland_get_wl_seat (phosh_wayland_get_default ()));
-      g_signal_emit (self, signals[APP_LAUNCHED], 0, priv->info);
-      return;
-    }
-  }
-
-  context = gdk_display_get_app_launch_context (gtk_widget_get_display (GTK_WIDGET (self)));
 
-  g_app_info_launch (G_APP_INFO (priv->info), NULL,
-                     G_APP_LAUNCH_CONTEXT (context), &error);
-
-  if (error) {
-    g_critical ("Failed to launch app %s: %s",
-                g_app_info_get_id (priv->info),
-                error->message);
-
-    return;
-  }
+  g_return_if_fail (PHOSH_IS_APP_TRACKER (app_tracker));
 
+  phosh_app_tracker_launch_app_info (app_tracker, priv->info);
   g_signal_emit (self, signals[APP_LAUNCHED], 0, priv->info);
 }
 
-- 
GitLab


From 0f1687e3ac456a5316edbfc5269c5831d8a1c113 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 19 Aug 2021 15:36:04 +0200
Subject: [PATCH 12/15] Add splash-manager
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The SplashManager listens to app-tracker events and shows/hides
splash screens as needed.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 docs/phosh-docs.xml  |   1 +
 src/meson.build      |   2 +
 src/splash-manager.c | 227 +++++++++++++++++++++++++++++++++++++++++++
 src/splash-manager.h |  21 ++++
 4 files changed, 251 insertions(+)
 create mode 100644 src/splash-manager.c
 create mode 100644 src/splash-manager.h

diff --git a/docs/phosh-docs.xml b/docs/phosh-docs.xml
index 5ebc6d19..99b2dd0e 100644
--- a/docs/phosh-docs.xml
+++ b/docs/phosh-docs.xml
@@ -115,6 +115,7 @@
       <xi:include href="xml/shell.xml"/>
       <xi:include href="xml/status-icon.xml"/>
       <xi:include href="xml/splash.xml"/>
+      <xi:include href="xml/splash-manager.xml"/>
       <xi:include href="xml/swipe-away-bin.xml"/>
       <xi:include href="xml/system-modal.xml"/>
       <xi:include href="xml/system-modal-dialog.xml"/>
diff --git a/src/meson.build b/src/meson.build
index d47fe525..ad802306 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -113,6 +113,8 @@ libphosh_tool_sources = files(
   'status-icon.h',
   'splash.c',
   'splash.h',
+  'splash-manager.c',
+  'splash-manager.h',
   'system-modal.c',
   'system-modal.h',
   'system-modal-dialog.c',
diff --git a/src/splash-manager.c b/src/splash-manager.c
new file mode 100644
index 00000000..ed2429ac
--- /dev/null
+++ b/src/splash-manager.c
@@ -0,0 +1,227 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ *
+ * Author: Guido Günther <agx@sigxcpu.org>
+ */
+
+#define G_LOG_DOMAIN "phosh-splash-manager"
+
+#include "config.h"
+
+#include "splash.h"
+#include "splash-manager.h"
+
+#include <gtk/gtk.h>
+
+/**
+ * SECTION:splash-manager
+ * @short_description: Handles splash screens
+ * @Title: PhoshSplashManager
+ *
+ * Spawn, keeps track and closes splash screens.
+ */
+
+enum {
+  PROP_0,
+  PROP_APP_TRACKER,
+  PROP_LAST_PROP
+};
+static GParamSpec *props[PROP_LAST_PROP];
+
+struct _PhoshSplashManager {
+  GObject          parent;
+
+  PhoshAppTracker *app_tracker;
+  GHashTable      *splashes;
+};
+G_DEFINE_TYPE (PhoshSplashManager, phosh_splash_manager, G_TYPE_OBJECT)
+
+
+static void
+phosh_splash_manager_set_property (GObject      *object,
+                                   guint         property_id,
+                                   const GValue *value,
+                                   GParamSpec   *pspec)
+{
+  PhoshSplashManager *self = PHOSH_SPLASH_MANAGER (object);
+
+  switch (property_id) {
+  case PROP_APP_TRACKER:
+    self->app_tracker = g_value_dup_object (value);
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    break;
+  }
+}
+
+
+static void
+phosh_splash_manager_get_property (GObject    *object,
+                                   guint       property_id,
+                                   GValue     *value,
+                                   GParamSpec *pspec)
+{
+  PhoshSplashManager *self = PHOSH_SPLASH_MANAGER (object);
+
+  switch (property_id) {
+  case PROP_APP_TRACKER:
+    g_value_set_object (value, self->app_tracker);
+    break;
+  default:
+    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+    break;
+  }
+}
+
+
+static void
+on_splash_closed (PhoshSplashManager *self, GtkWidget *splash)
+{
+  const gchar *key;
+
+  g_return_if_fail (PHOSH_IS_SPLASH_MANAGER (self));
+  g_return_if_fail (PHOSH_IS_SPLASH (splash));
+
+  key = g_object_get_data (G_OBJECT (splash), "startup-id");
+
+  g_return_if_fail (g_hash_table_remove (self->splashes, key));
+}
+
+
+static void
+on_app_ready (PhoshSplashManager *self,
+              GDesktopAppInfo    *info,
+              const char         *startup_id,
+              PhoshAppTracker    *tracker)
+{
+  GtkWidget *splash;
+
+  g_return_if_fail (PHOSH_IS_SPLASH_MANAGER (self));
+
+  g_return_if_fail (PHOSH_IS_SPLASH_MANAGER (self));
+  g_return_if_fail (G_IS_DESKTOP_APP_INFO (info));
+  g_return_if_fail (startup_id);
+  g_debug ("Removing splash for %s, startup_id %s", g_app_info_get_id (G_APP_INFO (info)), startup_id);
+
+  splash = g_hash_table_lookup (self->splashes, startup_id);
+  /* E.g. firefox sends the same startup id for multiple windows */
+  if (!splash) {
+    g_debug ("No splash for startup_id %s", startup_id);
+    return;
+  }
+
+
+  gtk_widget_hide (splash);
+  g_hash_table_remove (self->splashes, startup_id);
+}
+
+
+static void
+on_app_spawned (PhoshSplashManager *self,
+                GDesktopAppInfo    *info,
+                const char         *startup_id,
+                PhoshAppTracker    *tracker)
+{
+  GtkWidget *splash;
+  char *key;
+
+  g_return_if_fail (PHOSH_IS_SPLASH_MANAGER (self));
+  g_return_if_fail (G_IS_DESKTOP_APP_INFO (info));
+  g_return_if_fail (startup_id);
+  g_return_if_fail (!g_hash_table_contains (self->splashes, startup_id));
+
+  g_debug ("Adding splash for %s, startup_id %s", g_app_info_get_id (G_APP_INFO (info)), startup_id);
+  splash = phosh_splash_new (info);
+  key = g_strdup (startup_id);
+  g_hash_table_insert (self->splashes, key, splash);
+  g_signal_connect_object (splash, "closed", G_CALLBACK (on_splash_closed),
+                           self, G_CONNECT_SWAPPED);
+  /* Keep key for easy close on swipe */
+  g_object_set_data (G_OBJECT (splash), "startup-id", key);
+  gtk_widget_show_all (splash);
+}
+
+
+static void
+phosh_splash_manager_constructed (GObject *object)
+{
+  PhoshSplashManager *self = PHOSH_SPLASH_MANAGER (object);
+
+  G_OBJECT_CLASS (phosh_splash_manager_parent_class)->constructed (object);
+
+  g_signal_connect_swapped (self->app_tracker,
+                            "app-launched::spawn",
+                            G_CALLBACK (on_app_spawned),
+                            self);
+
+  g_signal_connect_swapped (self->app_tracker,
+                            "app-ready",
+                            G_CALLBACK (on_app_ready),
+                            self);
+}
+
+
+static void
+phosh_splash_manager_dispose (GObject *object)
+{
+  PhoshSplashManager *self = PHOSH_SPLASH_MANAGER (object);
+
+  g_clear_object (&self->app_tracker);
+
+  G_OBJECT_CLASS (phosh_splash_manager_parent_class)->dispose (object);
+}
+
+
+static void
+phosh_splash_manager_finalize (GObject *object)
+{
+  PhoshSplashManager *self = PHOSH_SPLASH_MANAGER (object);
+
+  g_clear_pointer (&self->splashes, g_hash_table_destroy);
+
+  G_OBJECT_CLASS (phosh_splash_manager_parent_class)->finalize (object);
+}
+
+
+static void
+phosh_splash_manager_class_init (PhoshSplashManagerClass *klass)
+{
+  GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+  object_class->get_property = phosh_splash_manager_get_property;
+  object_class->set_property = phosh_splash_manager_set_property;
+  object_class->constructed = phosh_splash_manager_constructed;
+  object_class->dispose = phosh_splash_manager_dispose;
+  object_class->finalize = phosh_splash_manager_finalize;
+
+  props[PROP_APP_TRACKER] =
+    g_param_spec_object ("app-tracker",
+                         "",
+                         "",
+                         PHOSH_TYPE_APP_TRACKER,
+                         G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY);
+
+  g_object_class_install_properties (object_class, PROP_LAST_PROP, props);
+}
+
+
+static void
+phosh_splash_manager_init (PhoshSplashManager *self)
+{
+  self->splashes = g_hash_table_new_full (g_str_hash,
+                                          g_str_equal,
+                                          g_free,
+                                          (GDestroyNotify) gtk_widget_destroy);
+}
+
+
+PhoshSplashManager *
+phosh_splash_manager_new (PhoshAppTracker *app_tracker)
+{
+  return PHOSH_SPLASH_MANAGER (g_object_new (PHOSH_TYPE_SPLASH_MANAGER,
+                                             "app-tracker", app_tracker,
+                                             NULL));
+}
diff --git a/src/splash-manager.h b/src/splash-manager.h
new file mode 100644
index 00000000..a70107dc
--- /dev/null
+++ b/src/splash-manager.h
@@ -0,0 +1,21 @@
+/*
+ * Copyright (C) 2021 Purism SPC
+ *
+ * SPDX-License-Identifier: GPL-3.0-or-later
+ */
+
+#pragma once
+
+#include "app-tracker.h"
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define PHOSH_TYPE_SPLASH_MANAGER (phosh_splash_manager_get_type ())
+
+G_DECLARE_FINAL_TYPE (PhoshSplashManager, phosh_splash_manager, PHOSH, SPLASH_MANAGER, GObject)
+
+PhoshSplashManager *phosh_splash_manager_new (PhoshAppTracker *app_tracker);
+
+G_END_DECLS
-- 
GitLab


From 5c15bca349d4978f273d9f9c542b801791b7bede Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Thu, 19 Aug 2021 16:14:59 +0200
Subject: [PATCH 13/15] shell: Add and parse debug flags
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This makes it simpler to test certain aspects of the shell.

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/shell.c | 13 +++++++++++++
 src/shell.h | 18 ++++++++++++++++--
 2 files changed, 29 insertions(+), 2 deletions(-)

diff --git a/src/shell.c b/src/shell.c
index 2dc676b1..7de8cfc8 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -148,6 +148,7 @@ typedef struct
   PhoshProximity *proximity;
   PhoshRotationManager *rotation_manager;
 
+  PhoshShellDebugFlags debug_flags;
   gboolean startup_finished;
 
   /* Mirrors PhoshLockscreenManager's locked property */
@@ -811,12 +812,24 @@ phosh_shell_class_init (PhoshShellClass *klass)
 }
 
 
+static GDebugKey debug_keys[] =
+{
+ { .key = "always-splash",
+   .value = PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH,
+ },
+};
+
+
 static void
 phosh_shell_init (PhoshShell *self)
 {
   PhoshShellPrivate *priv = phosh_shell_get_instance_private (self);
   GtkSettings *gtk_settings;
 
+  priv->debug_flags = g_parse_debug_string(g_getenv ("PHOSH_DEBUG"),
+                                           debug_keys,
+                                           G_N_ELEMENTS (debug_keys));
+
   gtk_settings = gtk_settings_get_default ();
   g_object_set (G_OBJECT (gtk_settings), "gtk-application-prefer-dark-theme", TRUE, NULL);
 
diff --git a/src/shell.h b/src/shell.h
index 8fa1e16a..fac365cb 100644
--- a/src/shell.h
+++ b/src/shell.h
@@ -30,6 +30,8 @@
 
 #include <gtk/gtk.h>
 
+G_BEGIN_DECLS
+
 /**
  * PhoshShellStateFlags:
  * @PHOSH_STATE_NONE: No other state
@@ -51,7 +53,19 @@ typedef enum {
   PHOSH_STATE_OVERVIEW            = 1 << 4,
 } PhoshShellStateFlags;
 
-G_BEGIN_DECLS
+
+/**
+ * PhoshShellDebugFlags
+ * @PHOSH_SHELL_DEBUG_FLAG_NONE: No debug flags
+ * @PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH: always use splash (even when docked)
+
+ * These flags are to enable/disable debugging features.
+ */
+typedef enum {
+  PHOSH_SHELL_DEBUG_FLAG_NONE          = 0,
+  PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH = 1 << 1,
+} PhoshShellDebugFlags;
+
 
 #define PHOSH_APP_ID "sm.puri.Phosh"
 
@@ -110,5 +124,5 @@ gboolean             phosh_shell_is_session_active (PhoshShell *self);
 GdkAppLaunchContext *phosh_shell_get_app_launch_context (PhoshShell *self);
 PhoshShellStateFlags phosh_shell_get_state (PhoshShell *self);
 void                 phosh_shell_set_state (PhoshShell *self, PhoshShellStateFlags state, gboolean enabled);
-
+PhoshShellDebugFlags phosh_shell_get_debug_flags (PhoshShell *self);
 G_END_DECLS
-- 
GitLab


From b9b20447f70e3814971551eb1eb43639197b09aa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 29 Jan 2021 11:44:44 +0100
Subject: [PATCH 14/15] splash-manager: Only show splash when not docked
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/shell.c          | 26 ++++++++++++++++++++++++++
 src/shell.h          |  1 +
 src/splash-manager.c |  5 +++++
 3 files changed, 32 insertions(+)

diff --git a/src/shell.c b/src/shell.c
index 7de8cfc8..141cde3b 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -1527,3 +1527,29 @@ phosh_shell_set_locked (PhoshShell *self, gboolean locked)
 
   phosh_lockscreen_manager_set_locked (priv->lockscreen_manager, locked);
 }
+
+
+/**
+ * phosh_shell_get_show_splash:
+ * @self: The #PhoshShell singleton
+ *
+ * Whether splash screens should be used when apps start
+ * Returns: %TRUE when splash should be used, otherwise %FALSE
+ */
+gboolean
+phosh_shell_get_show_splash (PhoshShell *self)
+{
+  PhoshShellPrivate *priv;
+
+  g_return_val_if_fail (PHOSH_IS_SHELL (self), TRUE);
+  priv = phosh_shell_get_instance_private (self);
+  g_return_val_if_fail (PHOSH_IS_DOCKED_MANAGER (priv->docked_manager), TRUE);
+
+  if (priv->debug_flags & PHOSH_SHELL_DEBUG_FLAG_ALWAYS_SPLASH)
+    return TRUE;
+
+  if (phosh_docked_manager_get_enabled (priv->docked_manager))
+    return FALSE;
+
+  return TRUE;
+}
diff --git a/src/shell.h b/src/shell.h
index fac365cb..67b3ce8d 100644
--- a/src/shell.h
+++ b/src/shell.h
@@ -125,4 +125,5 @@ GdkAppLaunchContext *phosh_shell_get_app_launch_context (PhoshShell *self);
 PhoshShellStateFlags phosh_shell_get_state (PhoshShell *self);
 void                 phosh_shell_set_state (PhoshShell *self, PhoshShellStateFlags state, gboolean enabled);
 PhoshShellDebugFlags phosh_shell_get_debug_flags (PhoshShell *self);
+gboolean             phosh_shell_get_show_splash (PhoshShell *self);
 G_END_DECLS
diff --git a/src/splash-manager.c b/src/splash-manager.c
index ed2429ac..9dbe26d9 100644
--- a/src/splash-manager.c
+++ b/src/splash-manager.c
@@ -10,6 +10,7 @@
 
 #include "config.h"
 
+#include "shell.h"
 #include "splash.h"
 #include "splash-manager.h"
 
@@ -127,12 +128,16 @@ on_app_spawned (PhoshSplashManager *self,
 {
   GtkWidget *splash;
   char *key;
+  PhoshShell *shell = phosh_shell_get_default ();
 
   g_return_if_fail (PHOSH_IS_SPLASH_MANAGER (self));
   g_return_if_fail (G_IS_DESKTOP_APP_INFO (info));
   g_return_if_fail (startup_id);
   g_return_if_fail (!g_hash_table_contains (self->splashes, startup_id));
 
+  if (!phosh_shell_get_show_splash (shell))
+    return;
+
   g_debug ("Adding splash for %s, startup_id %s", g_app_info_get_id (G_APP_INFO (info)), startup_id);
   splash = phosh_splash_new (info);
   key = g_strdup (startup_id);
-- 
GitLab


From aba1064279e276bfa3dd6ef25953cdcca1b39edc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Guido=20G=C3=BCnther?= <agx@sigxcpu.org>
Date: Fri, 27 Aug 2021 12:37:30 +0200
Subject: [PATCH 15/15] app-tracker: Track org.gtk.gio.DesktopAppInfo on DBus
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This allows us to show splash screens for apps that are spawned by
other processes than the shell itself. E.g.

    gtk4-launch gnome-control-center.desktop

We only do something if we get a desktop file name and a startup id (the
later is e.g. not the case when processes are spawned via 'gio launch'
or gnome-contacts).

Signed-off-by: Guido Günther <guido.gunther@puri.sm>
---
 src/splash-manager.c | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/splash-manager.c b/src/splash-manager.c
index 9dbe26d9..600591b5 100644
--- a/src/splash-manager.c
+++ b/src/splash-manager.c
@@ -144,9 +144,9 @@ on_app_spawned (PhoshSplashManager *self,
   g_hash_table_insert (self->splashes, key, splash);
   g_signal_connect_object (splash, "closed", G_CALLBACK (on_splash_closed),
                            self, G_CONNECT_SWAPPED);
-  /* Keep key for easy close on swipe */
+  /* Keep key for close triggered by splash itself */
   g_object_set_data (G_OBJECT (splash), "startup-id", key);
-  gtk_widget_show_all (splash);
+  gtk_window_present (GTK_WINDOW (splash));
 }
 
 
@@ -158,7 +158,7 @@ phosh_splash_manager_constructed (GObject *object)
   G_OBJECT_CLASS (phosh_splash_manager_parent_class)->constructed (object);
 
   g_signal_connect_swapped (self->app_tracker,
-                            "app-launched::spawn",
+                            "app-launched",
                             G_CALLBACK (on_app_spawned),
                             self);
 
-- 
GitLab

