diff --git a/docs/phosh-docs.xml b/docs/phosh-docs.xml
index d7f0b80..8d8ecd4 100644
--- a/docs/phosh-docs.xml
+++ b/docs/phosh-docs.xml
@@ -87,6 +87,7 @@
       <xi:include href="xml/proximity.xml"/>
       <xi:include href="xml/quick-setting.xml"/>
       <xi:include href="xml/rotateinfo.xml"/>
+      <xi:include href="xml/rotation-manager.xml"/>
       <xi:include href="xml/screen-saver-manager.xml"/>
       <xi:include href="xml/sensor-proxy-manager.xml"/>
       <xi:include href="xml/session.xml"/>
diff --git a/src/meson.build b/src/meson.build
index 93df138..fe7175c 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -122,6 +122,8 @@ libphosh_sources = [
   'polkit-auth-prompt.h',
   'proximity.h',
   'proximity.c',
+  'rotation-manager.h',
+  'rotation-manager.c',
   'sensor-proxy-manager.c',
   'sensor-proxy-manager.h',
   'rotateinfo.c',
diff --git a/src/rotateinfo.c b/src/rotateinfo.c
index 80cebe9..58a98e2 100644
--- a/src/rotateinfo.c
+++ b/src/rotateinfo.c
@@ -15,10 +15,10 @@
 
 /**
  * SECTION:rotateinfo
- * @short_description: A widget to display the rotate status
+ * @short_description: A widget to display the rotate lock status
  * @Title: PhoshRotateInfo
  *
- * Rotate Info widget
+ * A #PhoshStatusIcon to display the current rotation lock status.
  */
 
 typedef struct _PhoshRotateInfo {
@@ -28,61 +28,89 @@ typedef struct _PhoshRotateInfo {
 
 G_DEFINE_TYPE (PhoshRotateInfo, phosh_rotate_info, PHOSH_TYPE_STATUS_ICON)
 
-
-static void
-set_state (PhoshRotateInfo *self)
+static gboolean
+binding_set_icon (GBinding        *binding,
+                  const GValue    *from_value,
+                  GValue          *to_value,
+                  PhoshRotateInfo *self)
 {
-  PhoshShell *shell = phosh_shell_get_default ();
-  /* TODO: switch to builtin monitor once we support wlr-output-management */
-  PhoshMonitor *monitor = phosh_shell_get_primary_monitor (shell);
-  gboolean monitor_is_landscape;
-  gboolean portrait = !phosh_shell_get_rotation (shell);
-
-  /* If we have a landscape monitor (tv, laptop) flip the rotation */
-  monitor_is_landscape = ((double)monitor->width / (double)monitor->height) > 1.0;
-  portrait = monitor_is_landscape ? !portrait : portrait;
-
-  g_debug ("Potrait: %d, width: %d, height: %d", portrait, monitor->width , monitor->height);
-  if (portrait) {
-    phosh_status_icon_set_icon_name (PHOSH_STATUS_ICON (self), "screen-rotation-portrait-symbolic");
-    phosh_status_icon_set_info (PHOSH_STATUS_ICON (self), _("Portrait"));
-  } else {
-    phosh_status_icon_set_icon_name (PHOSH_STATUS_ICON (self), "screen-rotation-landscape-symbolic");
-    phosh_status_icon_set_info (PHOSH_STATUS_ICON (self), _("Landscape"));
-  }
+  gboolean locked = g_value_get_boolean (from_value);
+  const char *icon_name;
+
+  icon_name = locked ? "rotation-locked-symbolic" : "rotation-allowed-symbolic";
+  g_value_set_string (to_value, icon_name);
+
+  return TRUE;
 }
 
+static gboolean
+binding_set_info (GBinding        *binding,
+                  const GValue    *from_value,
+                  GValue          *to_value,
+                  PhoshRotateInfo *self)
 
-static void
-phosh_rotate_info_finalize (GObject *object)
 {
-  PhoshRotateInfo *self = PHOSH_ROTATE_INFO(object);
+  gboolean locked = g_value_get_boolean (from_value);
+  const gchar *info;
 
-  g_signal_handlers_disconnect_by_data (phosh_shell_get_default (), self);
+  /* Translators: Automatic screen orientation is either on (enabled) or off (locked/disabled) */
+  info = locked ? _("Off") : _("On");
+  g_value_set_string (to_value, info);
 
-  G_OBJECT_CLASS (phosh_rotate_info_parent_class)->finalize (object);
+  return TRUE;
 }
 
-
 static void
 phosh_rotate_info_class_init (PhoshRotateInfoClass *klass)
 {
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  object_class->finalize = phosh_rotate_info_finalize;
 }
 
+static void
+on_rotation_manager_changed (PhoshRotateInfo *self, GParamSpec *pspec, PhoshShell *shell)
+{
+  PhoshRotationManager *rotation_manager;
+
+  g_return_if_fail (PHOSH_IS_ROTATE_INFO (self));
+  g_return_if_fail (PHOSH_SHELL (shell));
+
+  rotation_manager = phosh_shell_get_rotation_manager (shell);
+  if (!rotation_manager)
+    return;
+
+  g_object_bind_property_full (rotation_manager,
+                               "orientation-locked",
+                               self,
+                               "icon-name",
+                               G_BINDING_SYNC_CREATE
+                               | G_BINDING_DEFAULT,
+                               (GBindingTransformFunc)binding_set_icon,
+                               NULL,
+                               self,
+                               NULL);
+  g_object_bind_property_full (rotation_manager,
+                               "orientation-locked",
+                               self,
+                               "info",
+                               G_BINDING_SYNC_CREATE
+                               | G_BINDING_DEFAULT,
+                               (GBindingTransformFunc)binding_set_info,
+                               NULL,
+                               self,
+                               NULL);
+}
 
 static void
 phosh_rotate_info_init (PhoshRotateInfo *self)
 {
-  g_signal_connect_swapped (phosh_shell_get_default (),
-                            "notify::rotation",
-                            G_CALLBACK (set_state),
-                            self);
-  set_state (self);
+  /* Rotation manager might not be there when iio-sensor-proxy is missing
+     so only connect to it once valid */
+  g_signal_connect_object (phosh_shell_get_default (),
+                           "notify::rotation-manager",
+                           G_CALLBACK (on_rotation_manager_changed),
+                           self,
+                           G_CONNECT_SWAPPED);
 }
 
-
 GtkWidget *
 phosh_rotate_info_new (void)
 {
diff --git a/src/settings.c b/src/settings.c
index 5ac4609..b82e0c4 100644
--- a/src/settings.c
+++ b/src/settings.c
@@ -89,15 +89,16 @@ brightness_value_changed_cb (GtkScale *scale_brightness, gpointer *unused)
 }
 
 static void
-rotation_setting_clicked_cb (PhoshSettings *self)
+rotation_locked_setting_clicked_cb (PhoshSettings *self)
 {
   PhoshShell *shell = phosh_shell_get_default ();
-  gboolean rotated;
+  PhoshRotationManager *rotation_manager;
+  gboolean locked;
 
-  g_return_if_fail (PHOSH_IS_SETTINGS (self));
-  rotated = phosh_shell_get_rotation (shell);
-  phosh_shell_rotate_display (shell, !rotated ? 90 : 0);
-  g_signal_emit (self, signals[SETTING_DONE], 0);
+  rotation_manager = phosh_shell_get_rotation_manager (shell);
+  g_return_if_fail (rotation_manager);
+  locked = phosh_rotation_manager_get_orientation_locked (rotation_manager);
+  phosh_rotation_manager_set_orientation_locked (rotation_manager, !locked);
 }
 
 static void
@@ -502,7 +503,8 @@ phosh_settings_class_init (PhoshSettingsClass *klass)
   gtk_widget_class_bind_template_child (widget_class, PhoshSettings, sw_notifications);
 
   gtk_widget_class_bind_template_callback (widget_class, battery_setting_clicked_cb);
-  gtk_widget_class_bind_template_callback (widget_class, rotation_setting_clicked_cb);
+  gtk_widget_class_bind_template_callback (widget_class, rotation_locked_setting_clicked_cb);  
+
   gtk_widget_class_bind_template_callback (widget_class, feedback_setting_clicked_cb);
   gtk_widget_class_bind_template_callback (widget_class, feedback_setting_long_pressed_cb);
   gtk_widget_class_bind_template_callback (widget_class, wifi_setting_clicked_cb);
diff --git a/src/shell.c b/src/shell.c
index 476028f..2d0a089 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -43,6 +43,7 @@
 #include "phosh-wayland.h"
 #include "polkit-auth-agent.h"
 #include "proximity.h"
+#include "rotation-manager.h"
 #include "sensor-proxy-manager.h"
 #include "screen-saver-manager.h"
 #include "session.h"
@@ -70,6 +71,7 @@ enum {
   PHOSH_SHELL_PROP_ROTATION,
   PHOSH_SHELL_PROP_LOCKED,
   PHOSH_SHELL_PROP_PRIMARY_MONITOR,
+  PHOSH_SHELL_PROP_ROTATION_MANAGER,
   PHOSH_SHELL_PROP_LAST_PROP
 };
 static GParamSpec *props[PHOSH_SHELL_PROP_LAST_PROP];
@@ -101,6 +103,7 @@ typedef struct
   /* sensors */
   PhoshSensorProxyManager *sensor_proxy_manager;
   PhoshProximity *proximity;
+  PhoshRotationManager *rotation_manager;
 
   gboolean startup_finished;
   int rot; /* current rotation of primary monitor */
@@ -312,6 +315,9 @@ phosh_shell_get_property (GObject *object,
   case PHOSH_SHELL_PROP_PRIMARY_MONITOR:
     g_value_set_object (value, phosh_shell_get_primary_monitor (self));
     break;
+  case PHOSH_SHELL_PROP_ROTATION_MANAGER:
+    g_value_set_object (value, phosh_shell_get_rotation_manager (self));
+    break;
   default:
     G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
     break;
@@ -356,6 +362,7 @@ phosh_shell_dispose (GObject *object)
 
   /* sensors */
   g_clear_object (&priv->proximity);
+  g_clear_object (&priv->rotation_manager);
   g_clear_object (&priv->sensor_proxy_manager);
   phosh_system_prompter_unregister ();
   phosh_session_unregister ();
@@ -474,7 +481,9 @@ setup_idle_cb (PhoshShell *self)
   if (priv->sensor_proxy_manager) {
     priv->proximity = phosh_proximity_new (priv->sensor_proxy_manager,
                                            priv->lockscreen_manager);
-    /* TODO: accelerometer */
+    priv->rotation_manager = phosh_rotation_manager_new (priv->sensor_proxy_manager,
+                                                         priv->lockscreen_manager);
+    g_object_notify_by_pspec (G_OBJECT (self), props[PHOSH_SHELL_PROP_ROTATION_MANAGER]);
   }
 
   phosh_session_register (PHOSH_APP_ID);
@@ -624,6 +633,13 @@ phosh_shell_class_init (PhoshShellClass *klass)
                          PHOSH_TYPE_MONITOR,
                          G_PARAM_READWRITE | G_PARAM_EXPLICIT_NOTIFY);
 
+  props[PHOSH_SHELL_PROP_ROTATION_MANAGER] =
+    g_param_spec_object ("rotation-manager",
+                         "Rotation manager",
+                         "The rotation manager",
+                         PHOSH_TYPE_ROTATION_MANAGER,
+                         G_PARAM_READABLE | G_PARAM_EXPLICIT_NOTIFY);
+
   g_object_class_install_properties (object_class, PHOSH_SHELL_PROP_LAST_PROP, props);
 }
 
@@ -887,6 +903,18 @@ phosh_shell_get_wwan (PhoshShell *self)
 }
 
 
+PhoshRotationManager *
+phosh_shell_get_rotation_manager (PhoshShell *self)
+{
+  PhoshShellPrivate *priv;
+
+  g_return_val_if_fail (PHOSH_IS_SHELL (self), NULL);
+  priv = phosh_shell_get_instance_private (self);
+  g_return_val_if_fail (PHOSH_IS_ROTATION_MANAGER (priv->rotation_manager), NULL);
+
+  return priv->rotation_manager;
+}
+
 /**
  * Returns the usable area in pixels usable by a client on the phone
  * display
diff --git a/src/shell.h b/src/shell.h
index 377738f..16ddd21 100644
--- a/src/shell.h
+++ b/src/shell.h
@@ -13,6 +13,7 @@
 #include "monitor/monitor.h"
 #include "lockscreen-manager.h"
 #include "osk-manager.h"
+#include "rotation-manager.h"
 #include "toplevel-manager.h"
 #include "wifimanager.h"
 #include "bt-manager.h"
diff --git a/src/ui/settings-menu.ui b/src/ui/settings-menu.ui
index 43dad28..0c9ff1b 100644
--- a/src/ui/settings-menu.ui
+++ b/src/ui/settings-menu.ui
@@ -94,7 +94,7 @@
                   <object class="PhoshQuickSetting">
                     <property name="visible">True</property>
                     <property name="can_focus">False</property>
-                    <signal name="clicked" handler="rotation_setting_clicked_cb" object="PhoshSettings" swapped="yes"/>
+                    <signal name="clicked" handler="rotation_locked_setting_clicked_cb" object="PhoshSettings" swapped="yes"/>
                     <child>
                       <object class="PhoshRotateInfo" id="rotateinfo">
                         <property name="visible">True</property>
