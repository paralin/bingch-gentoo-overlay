From 678caef5a304e42d5a2b652d2dd643152cb1761f Mon Sep 17 00:00:00 2001
From: ArenM <aren@peacevolution.org>
Date: Mon, 6 Sep 2021 21:20:21 -0400
Subject: [PATCH 1/5] udev: Keep track of what ports are connected to the modem

---
 data/pine64,pinephone-1.2.toml |   2 +
 src/manager.h                  |   7 ++
 src/mm-iface.c                 |   8 ---
 src/ofono-iface.c              |  10 ---
 src/udev.c                     | 123 +++++++++++++++++++++++++++++----
 5 files changed, 120 insertions(+), 30 deletions(-)

diff --git a/data/pine64,pinephone-1.2.toml b/data/pine64,pinephone-1.2.toml
index 4244bee..ec1c1e9 100644
--- a/data/pine64,pinephone-1.2.toml
+++ b/data/pine64,pinephone-1.2.toml
@@ -1,6 +1,8 @@
 [manager]
 # Delay between setting GPIO and PWRKEY sequence, set in microseconds
 poweron_delay = 100000
+usb_vid = 0x2c7c
+usb_pid = 0x0125
 
 # Uncomment the following if you need to change the modem detection timeout on
 # resume and/or the time during which suspend is blocked after modem boot
diff --git a/src/manager.h b/src/manager.h
index 3e097b3..d1811c8 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -62,6 +62,9 @@ enum ModemIface {
     MODEM_IFACE_OFONO
 };
 
+#define MODEM_PORTS_OFFLINE 0
+#define MODEM_PORTS_ONLINE  5
+
 struct EG25Manager {
     GMainLoop *loop;
     guint reset_timer;
@@ -76,6 +79,10 @@ struct EG25Manager {
     void (*at_callback)(struct EG25Manager *manager, const char *response);
 
     enum EG25State modem_state;
+
+    GList *tracked_ports;
+    int port_status;
+
     gchar *modem_usb_id;
 
     gboolean gnss_assistance_enabled;
diff --git a/src/mm-iface.c b/src/mm-iface.c
index 577a718..92b18fb 100644
--- a/src/mm-iface.c
+++ b/src/mm-iface.c
@@ -51,10 +51,6 @@ static void add_modem(struct EG25Manager *manager, GDBusObject *object)
 
     path = mm_modem_get_device(manager->mm_modem);
 
-    if (manager->modem_usb_id)
-        g_free(manager->modem_usb_id);
-    manager->modem_usb_id = g_strdup(strrchr(path, '/') + 1);
-
     gdbus_modem = MM_GDBUS_MODEM(manager->mm_modem);
 
     g_signal_connect(gdbus_modem, "state-changed", G_CALLBACK(state_changed_cb), manager);
@@ -192,10 +188,6 @@ static void mm_iface_clean(struct EG25Manager *manager)
         g_clear_object(&manager->mm_manager);
         manager->mm_manager = NULL;
     }
-    if (manager->modem_usb_id) {
-        g_free(manager->modem_usb_id);
-        manager->modem_usb_id = NULL;
-    }
     if (manager->modem_iface == MODEM_IFACE_MODEMMANAGER) {
         manager->modem_iface = MODEM_IFACE_NONE;
     }
diff --git a/src/ofono-iface.c b/src/ofono-iface.c
index bc37f38..6505548 100644
--- a/src/ofono-iface.c
+++ b/src/ofono-iface.c
@@ -19,7 +19,6 @@ static void modem_added_cb(GDBOManager *manager_proxy,
                            GVariant *properties,
                            struct EG25Manager *manager)
 {
-    GVariant *modem_path;
     g_debug("Adding ofono modem '%s'", path);
 
     if (manager->modem_state == EG25_STATE_RESUMING) {
@@ -36,11 +35,6 @@ static void modem_added_cb(GDBOManager *manager_proxy,
 
     if (manager->modem_state < EG25_STATE_CONFIGURED)
         modem_configure(manager);
-
-    modem_path = g_variant_lookup_value(properties, "SystemPath", G_VARIANT_TYPE_STRING);
-    if (manager->modem_usb_id)
-        g_free(manager->modem_usb_id);
-    manager->modem_usb_id = g_strdup(strrchr(g_variant_dup_string(modem_path, NULL), '/') + 1);
 }
 
 static void modem_removed_cb(GDBOManager *manager_proxy,
@@ -139,10 +133,6 @@ void ofono_iface_init(struct EG25Manager *manager)
 
 void ofono_iface_destroy(struct EG25Manager *manager)
 {
-    if (manager->modem_usb_id) {
-        g_free(manager->modem_usb_id);
-        manager->modem_usb_id = NULL;
-    }
     if (manager->ofono_watch != 0) {
         g_bus_unwatch_name(manager->ofono_watch);
         manager->ofono_watch = 0;
diff --git a/src/udev.c b/src/udev.c
index 10302cd..75a4709 100644
--- a/src/udev.c
+++ b/src/udev.c
@@ -8,35 +8,134 @@
 
 #include <string.h>
 
-static void udev_event_cb(GUdevClient *client, gchar *action, GUdevDevice *device, gpointer data)
-{
-    struct EG25Manager *manager = data;
+static guint parse_hex_number(const gchar *bytes) {
+    guint64 num;
+    gboolean ret = g_ascii_string_to_unsigned(bytes, 16, 0, UINT64_MAX, &num, NULL);
+
+    if (!ret)
+        return 0;
+
+    return num;
+}
+
+static gboolean is_modem_root(GUdevDevice *device, struct EG25Manager *manager) {
+    const gchar *driver = g_udev_device_get_driver(device);
+    const gchar *devtype = g_udev_device_get_devtype(device);
+    const gchar *vid = g_udev_device_get_sysfs_attr(device, "idVendor");
+    const gchar *pid = g_udev_device_get_sysfs_attr(device, "idProduct");
+
+    const gboolean udev_prop_match =
+        g_strcmp0(driver, "usb") == 0 &&
+        g_strcmp0(devtype, "usb_device") == 0 &&
+        parse_hex_number(vid) == manager->usb_vid &&
+        parse_hex_number(pid) == manager->usb_pid;
+
+    const gboolean stored_device_match =
+        g_strcmp0(g_udev_device_get_name(device), manager->modem_usb_id) == 0;
+
+    return udev_prop_match || stored_device_match;
+}
+
+static gboolean is_modem_port(GUdevDevice *device, struct EG25Manager *manager) {
+    g_autoptr(GUdevDevice) parent = g_udev_device_get_parent(device);
+    const gchar *name = g_udev_device_get_name(device);
+
+    if (g_strcmp0(g_udev_device_get_name(parent), manager->modem_usb_id) == 0)
+        return TRUE;
+
+    return g_list_find_custom(manager->tracked_ports, name, (GCompareFunc)g_strcmp0) != NULL;
+}
+
+static void bind_device(GUdevDevice *device, struct EG25Manager *manager) {
+    gchar *name = g_strdup(g_udev_device_get_name(device));
+    g_debug("Device port %s added", name);
+
+    if (manager->port_status == MODEM_PORTS_OFFLINE)
+        g_message("Port status changed: offline->mixed");
+    if (manager->port_status == MODEM_PORTS_ONLINE - 1)
+        g_message("Port status changed: mixed->online");
+
+    manager->tracked_ports = g_list_append(manager->tracked_ports, name);
 
-    if (strcmp(action, "unbind") != 0 ||
-        manager->modem_state == EG25_STATE_RESETTING ||
-        !manager->modem_usb_id) {
-        return;
+    manager->port_status++;
+    if (manager->port_status > 5) {
+        g_critical("Modem has more usb interfaces than expected");
+        manager->port_status = 5;
     }
+}
+
+static void remove_device(GUdevDevice *device, struct EG25Manager *manager) {
+    const gchar *name = g_udev_device_get_name(device);
+    GList *link;
+
+    g_debug("Device port %s removed", name);
+    if (manager->port_status == MODEM_PORTS_ONLINE)
+        g_message("Port status changed: online->mixed");
+    if (manager->port_status == MODEM_PORTS_OFFLINE + 1)
+        g_message("Port status changed: mixed->offline");
+
+    link = g_list_find_custom(manager->tracked_ports, name, g_str_equal);
+    manager->tracked_ports = g_list_delete_link(manager->tracked_ports, link);
+
+    manager->port_status--;
+    if (manager->port_status < 0) {
+        g_critical("Counted a negative number of usb interfaces");
+        manager->port_status = 0;
+    }
+}
+
+static void udev_event_cb(GUdevClient *client, gchar *action, GUdevDevice *device, struct EG25Manager *manager)
+{
+    const gchar *device_name = g_udev_device_get_name(device);
+
+    if (g_str_equal(action, "bind") && is_modem_port(device, manager)) {
+        bind_device(device, manager);
+    } else if (g_str_equal(action, "unbind") && is_modem_port(device, manager)) {
+        remove_device(device, manager);
+    } else if (g_str_equal(action, "add") && is_modem_root(device, manager)) {
+        g_debug("Modem root device %s appeared", device_name);
+        manager->modem_usb_id = g_strdup(device_name);
+        manager->port_status = MODEM_PORTS_OFFLINE;
+    } else if (g_str_equal(action, "remove") && is_modem_root(device, manager)) {
+        g_debug("Modem root device removed");
 
-    if (strncmp(g_udev_device_get_name(device), manager->modem_usb_id, strlen(manager->modem_usb_id)) == 0 &&
-        manager->reset_timer == 0) {
-        g_message("Lost modem, resetting...");
-        modem_reset(manager);
+        g_free(manager->modem_usb_id);
+        manager->modem_usb_id = NULL;
+        manager->port_status = MODEM_PORTS_OFFLINE;
     }
 }
 
+static gboolean find_modem_root(GUdevDevice *device, struct EG25Manager *manager) {
+    return !is_modem_root(device, manager);
+}
+
+static void populate_modem_ports(GUdevDevice *device, struct EG25Manager *manager) {
+    if (is_modem_port(device, manager))
+        bind_device(device, manager);
+}
+
 void udev_init (struct EG25Manager *manager, toml_table_t *config)
 {
+    g_autolist(GUdevDevice) devices;
+    GList *root;
     const char * const subsystems[] = { "usb", NULL };
 
     manager->udev = g_udev_client_new(subsystems);
     g_signal_connect(manager->udev, "uevent", G_CALLBACK(udev_event_cb), manager);
 
-    return;
+    devices = g_udev_client_query_by_subsystem(manager->udev, "usb");
+    root = g_list_find_custom(devices, manager, (GCompareFunc)find_modem_root);
+    if (root != NULL) {
+        manager->modem_usb_id = g_strdup(g_udev_device_get_name(root->data));
+        g_debug("Found root port %s", manager->modem_usb_id);
+        g_list_foreach(devices, (GFunc)populate_modem_ports, manager);
+    }
 }
 
 void udev_destroy (struct EG25Manager *manager)
 {
+    g_list_free_full(manager->tracked_ports, g_free);
+
     if (manager->udev) {
         g_object_unref(manager->udev);
         manager->udev = NULL;
-- 
GitLab


From 7b137584d57fe4f90b627c3a31ba664b123f0203 Mon Sep 17 00:00:00 2001
From: ArenM <aren@peacevolution.org>
Date: Tue, 7 Sep 2021 16:28:04 -0400
Subject: [PATCH 2/5] gpio: use interrupts to read gpio pins instead of polling

---
 src/gpio.c    | 60 ++++++++++++++++++++++++++++++++++++++-------------
 src/gpio.h    |  2 +-
 src/manager.h |  4 ++++
 3 files changed, 50 insertions(+), 16 deletions(-)

diff --git a/src/gpio.c b/src/gpio.c
index aae9b94..2f6ffe7 100644
--- a/src/gpio.c
+++ b/src/gpio.c
@@ -5,6 +5,7 @@
  */
 
 #include "gpio.h"
+#include <glib-unix.h>
 
 #include <unistd.h>
 
@@ -102,6 +103,32 @@ static guint get_config_gpio(toml_table_t *config, const char *id)
     return gpio;
 }
 
+struct gpio_event_ctx {
+    struct EG25Manager *manager;
+    int line_id;
+};
+
+static gboolean gpio_line_event(gint fd, GIOCondition cond, struct gpio_event_ctx *ctx)
+{
+    struct gpiod_line_event *event = g_malloc(sizeof(struct gpiod_line_event));
+
+    gpiod_line_event_read_fd(fd, event);
+
+    if (event->event_type == GPIOD_LINE_EVENT_RISING_EDGE) {
+        g_debug("Got rising edge gpio event on device %i", ctx->line_id);
+        ctx->manager->gpio_in_values[ctx->line_id] = 1;
+    } else {
+        g_debug("Got falling edge gpio event on device %i", ctx->line_id);
+        ctx->manager->gpio_in_values[ctx->line_id] = 0;
+    }
+    g_free(event);
+
+    if (ctx->line_id == GPIO_IN_STATUS && ctx->manager->gpio_status_callback_fn != NULL)
+        ctx->manager->gpio_status_callback_fn(ctx->manager->gpio_status_callback_user_data);
+
+    return G_SOURCE_CONTINUE;
+}
+
 int gpio_init(struct EG25Manager *manager, toml_table_t *config)
 {
     int i, ret;
@@ -153,6 +180,7 @@ int gpio_init(struct EG25Manager *manager, toml_table_t *config)
 
     for (i = 0; i < GPIO_IN_COUNT; i++) {
         guint offset, chipidx;
+        struct gpio_event_ctx *ctx;
 
         if (gpio_in_idx[i] == GPIO_IDX_INVAL)
             continue;
@@ -171,30 +199,32 @@ int gpio_init(struct EG25Manager *manager, toml_table_t *config)
             continue;
         }
 
-        ret = gpiod_line_request_input(manager->gpio_in[i], "eg25manager");
+        ret = gpiod_line_request_both_edges_events(manager->gpio_in[i], "eg25manager");
         if (ret < 0) {
-            g_warning("Unable to request input GPIO %d", i);
+            g_warning("Unable to request egde events on GPIO %d", i);
             manager->gpio_in[i] = NULL;
+            continue;
         }
+
+        ctx = g_malloc(sizeof(struct gpio_event_ctx));
+        ctx->manager = manager;
+        ctx->line_id = i;
+
+        g_unix_fd_add_full(
+            G_PRIORITY_DEFAULT,
+            gpiod_line_event_get_fd(manager->gpio_in[i]),
+            G_IO_IN,
+            (GUnixFDSourceFunc)gpio_line_event,
+            ctx,
+            g_free);
     }
 
     return 0;
 }
 
-gboolean gpio_check_poweroff(struct EG25Manager *manager, gboolean keep_down)
+gboolean gpio_check_poweroff(struct EG25Manager *manager)
 {
-    if (manager->gpio_in[GPIO_IN_STATUS] &&
-        gpiod_line_get_value(manager->gpio_in[GPIO_IN_STATUS]) == 1) {
-
-        if (keep_down && manager->gpio_out[GPIO_OUT_RESET]) {
-            // Asserting RESET line to prevent modem from rebooting
-            gpiod_line_set_value(manager->gpio_out[GPIO_OUT_RESET], 1);
-        }
-
-        return TRUE;
-    }
-
-    return FALSE;
+    return manager->gpio_in_values[GPIO_IN_STATUS] == 1;
 }
 
 void gpio_destroy(struct EG25Manager *manager)
diff --git a/src/gpio.h b/src/gpio.h
index a041bdc..c712b05 100644
--- a/src/gpio.h
+++ b/src/gpio.h
@@ -18,4 +18,4 @@ int gpio_sequence_resume(struct EG25Manager *state);
 int gpio_sequence_wake(struct EG25Manager *state);
 int gpio_sequence_sleep(struct EG25Manager *state);
 
-gboolean gpio_check_poweroff(struct EG25Manager *manager, gboolean keep_down);
+gboolean gpio_check_poweroff(struct EG25Manager *manager);
diff --git a/src/manager.h b/src/manager.h
index d1811c8..36e432e 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -117,6 +117,10 @@ struct EG25Manager {
     struct gpiod_chip *gpiochip[2];
     struct gpiod_line *gpio_out[5];
     struct gpiod_line *gpio_in[2];
+    int                gpio_in_values[2];
+
+    void (*gpio_status_callback_fn)(gpointer user_data);
+    gpointer gpio_status_callback_user_data;
 };
 
 void modem_configure(struct EG25Manager *data);
-- 
GitLab


From d3834074037f61264066921d73fd185e1e3b0610 Mon Sep 17 00:00:00 2001
From: ArenM <aren@peacevolution.org>
Date: Mon, 6 Sep 2021 21:37:05 -0400
Subject: [PATCH 3/5] gpio: add functions to handle the reset pin

We can't set the reset pin when rebooting the modem, but still need to
do so when we exit. We also need to be able to send a pulse on the reset
pin if the modem hangs.
---
 src/gpio.c | 17 +++++++++++++++++
 src/gpio.h |  2 ++
 2 files changed, 19 insertions(+)

diff --git a/src/gpio.c b/src/gpio.c
index 2f6ffe7..0dbb95d 100644
--- a/src/gpio.c
+++ b/src/gpio.c
@@ -52,6 +52,15 @@ int gpio_sequence_shutdown(struct EG25Manager *manager)
     return 0;
 }
 
+int gpio_sequence_force_reset(struct EG25Manager *manager) {
+    // Setting reset for between 150 and 460 miliseconds will reset the modem
+    gpiod_line_set_value(manager->gpio_out[GPIO_OUT_RESET], 1);
+    usleep(200000);
+    gpiod_line_set_value(manager->gpio_out[GPIO_OUT_RESET], 0);
+
+    return 0;
+}
+
 int gpio_sequence_suspend(struct EG25Manager *manager)
 {
     gpiod_line_set_value(manager->gpio_out[GPIO_OUT_APREADY], 1);
@@ -90,6 +99,14 @@ int gpio_sequence_sleep(struct EG25Manager *manager)
     return 0;
 }
 
+/* Set the reset line so that the modem can't be accidentally restarted */
+int gpio_assert_reset(struct EG25Manager *manager)
+{
+    gpiod_line_set_value(manager->gpio_out[GPIO_OUT_RESET], 1);
+
+    return 0;
+}
+
 static guint get_config_gpio(toml_table_t *config, const char *id)
 {
     toml_datum_t value = toml_int_in(config, id);
diff --git a/src/gpio.h b/src/gpio.h
index c712b05..493949b 100644
--- a/src/gpio.h
+++ b/src/gpio.h
@@ -13,9 +13,11 @@ void gpio_destroy(struct EG25Manager *state);
 
 int gpio_sequence_poweron(struct EG25Manager *state);
 int gpio_sequence_shutdown(struct EG25Manager *state);
+int gpio_sequence_force_reset(struct EG25Manager *state);
 int gpio_sequence_suspend(struct EG25Manager *state);
 int gpio_sequence_resume(struct EG25Manager *state);
 int gpio_sequence_wake(struct EG25Manager *state);
 int gpio_sequence_sleep(struct EG25Manager *state);
+int gpio_assert_reset(struct EG25Manager *state);
 
 gboolean gpio_check_poweroff(struct EG25Manager *manager);
-- 
GitLab


From 9b117c71d22bc94577dd75b89f492d9d5aa46f15 Mon Sep 17 00:00:00 2001
From: ArenM <aren@peacevolution.org>
Date: Mon, 6 Sep 2021 21:37:57 -0400
Subject: [PATCH 4/5] manager: make powerdown procedure async

---
 src/gpio.c    |  8 ++---
 src/manager.c | 85 ++++++++++++++++++++++++++++++++++++++++++---------
 src/manager.h | 11 +++++--
 src/udev.c    |  3 ++
 4 files changed, 85 insertions(+), 22 deletions(-)

diff --git a/src/gpio.c b/src/gpio.c
index 0dbb95d..02c9f80 100644
--- a/src/gpio.c
+++ b/src/gpio.c
@@ -132,16 +132,16 @@ static gboolean gpio_line_event(gint fd, GIOCondition cond, struct gpio_event_ct
     gpiod_line_event_read_fd(fd, event);
 
     if (event->event_type == GPIOD_LINE_EVENT_RISING_EDGE) {
-        g_debug("Got rising edge gpio event on device %i", ctx->line_id);
+        g_message("Got rising edge gpio event on device %i", ctx->line_id);
         ctx->manager->gpio_in_values[ctx->line_id] = 1;
     } else {
-        g_debug("Got falling edge gpio event on device %i", ctx->line_id);
+        g_message("Got falling edge gpio event on device %i", ctx->line_id);
         ctx->manager->gpio_in_values[ctx->line_id] = 0;
     }
     g_free(event);
 
-    if (ctx->line_id == GPIO_IN_STATUS && ctx->manager->gpio_status_callback_fn != NULL)
-        ctx->manager->gpio_status_callback_fn(ctx->manager->gpio_status_callback_user_data);
+    if (ctx->line_id == GPIO_IN_STATUS && ctx->manager->gpio_status_callback)
+        ctx->manager->gpio_status_callback->cb(ctx->manager->gpio_status_callback->user_data);
 
     return G_SOURCE_CONTINUE;
 }
diff --git a/src/manager.c b/src/manager.c
index d13a2a0..997174c 100644
--- a/src/manager.c
+++ b/src/manager.c
@@ -33,33 +33,88 @@
 #define EG25_DATADIR "/usr/share/eg25-manager"
 #endif
 
-static gboolean quit_app(struct EG25Manager *manager)
+typedef void(*modem_down_callback)(struct EG25Manager *manager);
+struct ModemPowerdownState {
+    guint powerdown_timeout;
+    struct EG25Manager *manager;
+    modem_down_callback callback;
+};
+
+static gboolean modem_powerdown_finish(struct ModemPowerdownState *ctx)
 {
-    int i;
+    if (!gpio_check_poweroff(ctx->manager))
+        g_warning("Modem didn't report turning off after 60 seconds");
+    else if (ctx->manager->modem_usb_id != NULL)
+        g_warning("Modem still has usb devices attached even though it reports being off");
 
-    g_message("Request to quit...");
+    // both of these point to the same place, so we only need to free one
+    g_free(ctx->manager->gpio_status_callback);
+    ctx->manager->gpio_status_callback = NULL;
+    ctx->manager->udev_status_callback = NULL;
+
+    ctx->callback(ctx->manager);
+    g_free(ctx);
+
+    return G_SOURCE_REMOVE;
+}
+
+static void powerdown_success(gpointer user_data)
+{
+    struct ModemPowerdownState *ctx = user_data;
+
+    // Wait a moment in case there's more events to process
+    g_source_remove(ctx->powerdown_timeout);
+    g_timeout_add_seconds(1, (GSourceFunc)modem_powerdown_finish, ctx);
+}
+
+static void modem_powerdown(struct EG25Manager *manager, modem_down_callback callback)
+{
+    struct ModemPowerdownState *ctx = g_malloc0(sizeof(struct ModemPowerdownState));
+    struct modem_status_callback *powerdown_cb = g_malloc0(sizeof(struct modem_status_callback));
+
+    ctx->callback = callback;
+    ctx->manager = manager;
+
+    powerdown_cb->user_data = ctx;
+    powerdown_cb->cb = powerdown_success;
+    manager->gpio_status_callback = powerdown_cb;
+    manager->udev_status_callback = powerdown_cb;
+    
+    // Not doing this seems to cause the modem to hang during powerdown
+    gpio_sequence_wake(manager);
+    gpio_sequence_shutdown(manager);
+
+    manager->modem_state = EG25_STATE_FINISHING;
+    ctx->powerdown_timeout = g_timeout_add_seconds(60, (GSourceFunc)modem_powerdown_finish, ctx);
+}
 
+static void quit_app_finish(struct EG25Manager *manager)
+{
+    g_message("Modem down, quitting...");
+
+    gpio_assert_reset(manager);
     at_destroy(manager);
+    udev_destroy(manager);
+
+    g_main_loop_quit(manager->loop);
+}
+
+static gboolean quit_app(struct EG25Manager *manager)
+{
+    g_message("Request to quit...");
+
 #ifdef HAVE_MMGLIB
     mm_iface_destroy(manager);
 #endif
     ofono_iface_destroy(manager);
     suspend_destroy(manager);
-    udev_destroy(manager);
 
     if (manager->modem_state >= EG25_STATE_STARTED) {
         g_message("Powering down the modem...");
-        gpio_sequence_shutdown(manager);
-        manager->modem_state = EG25_STATE_FINISHING;
-        for (i = 0; i < 30; i++) {
-            if (gpio_check_poweroff(manager, TRUE))
-                break;
-            sleep(1);
-        }
+        modem_powerdown(manager, quit_app_finish);
+    } else {
+        quit_app_finish(manager);
     }
-    g_message("Modem down, quitting...");
-
-    g_main_loop_quit(manager->loop);
 
     return FALSE;
 }
@@ -88,7 +143,7 @@ static gboolean modem_start(struct EG25Manager *manager)
 
         libusb_free_device_list(devices, 1);
         libusb_exit(ctx);
-    } else if (!gpio_check_poweroff(manager, FALSE)) {
+    } else if (!gpio_check_poweroff(manager)) {
         g_message("STATUS is low, modem already powered");
         should_boot = FALSE;
     }
diff --git a/src/manager.h b/src/manager.h
index 36e432e..bd762a5 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -62,6 +62,11 @@ enum ModemIface {
     MODEM_IFACE_OFONO
 };
 
+struct modem_status_callback {
+    gpointer user_data;
+    void (*cb)(gpointer user_data);
+};
+
 #define MODEM_PORTS_OFFLINE 0
 #define MODEM_PORTS_ONLINE  5
 
@@ -82,8 +87,9 @@ struct EG25Manager {
 
     GList *tracked_ports;
     int port_status;
-
     gchar *modem_usb_id;
+    // NOTE: this is only used for powerdown, so it only gets remove events
+    struct modem_status_callback *udev_status_callback;
 
     gboolean gnss_assistance_enabled;
     EG25GNSSSource gnss_sources;
@@ -119,8 +125,7 @@ struct EG25Manager {
     struct gpiod_line *gpio_in[2];
     int                gpio_in_values[2];
 
-    void (*gpio_status_callback_fn)(gpointer user_data);
-    gpointer gpio_status_callback_user_data;
+    struct modem_status_callback *gpio_status_callback;
 };
 
 void modem_configure(struct EG25Manager *data);
diff --git a/src/udev.c b/src/udev.c
index 75a4709..a53c346 100644
--- a/src/udev.c
+++ b/src/udev.c
@@ -102,6 +102,9 @@ static void udev_event_cb(GUdevClient *client, gchar *action, GUdevDevice *devic
         g_free(manager->modem_usb_id);
         manager->modem_usb_id = NULL;
         manager->port_status = MODEM_PORTS_OFFLINE;
+
+        if (manager->udev_status_callback)
+            manager->udev_status_callback->cb(manager->udev_status_callback->user_data);
     }
 }
 
-- 
GitLab


From 1566bd142799011a5210b3982d61612794b2ecf3 Mon Sep 17 00:00:00 2001
From: ArenM <aren@peacevolution.org>
Date: Tue, 7 Sep 2021 13:54:30 -0400
Subject: [PATCH 5/5] manager: power cycle the modem if rebinding doesn't work

The modem can end up in a state where it reports that it's powered on,
but it disconnects the usb interface. This reboots the modem using the
gpio pins if the modem doesn't come back online after modem_reset is
called.
---
 src/manager.c | 170 +++++++++++++++++++++++++++++++++++---------------
 src/manager.h |  18 +++++-
 src/udev.c    |  57 +++++++++++++++++
 3 files changed, 191 insertions(+), 54 deletions(-)

diff --git a/src/manager.c b/src/manager.c
index 997174c..69bce98 100644
--- a/src/manager.c
+++ b/src/manager.c
@@ -186,76 +186,142 @@ void modem_configure(struct EG25Manager *manager)
     at_sequence_configure(manager);
 }
 
-static gboolean modem_reset_done(struct EG25Manager* manager)
-{
-    manager->modem_state = EG25_STATE_RESUMING;
-    manager->reset_timer = 0;
-    return FALSE;
-}
-
-void modem_reset(struct EG25Manager *manager)
+static gboolean modem_reset_rebind(struct EG25Manager *manager)
 {
     int fd, ret, len;
 
-    if (manager->reset_timer)
-        return;
-
-    /*
-     * If we are managing the modem through lets say ofono, we should not
-     * reset the modem based on the availability of USB ID
-     * TODO: Improve ofono plugin and add support for fetching USB ID
-     */
-    if (manager->modem_iface != MODEM_IFACE_MODEMMANAGER)
-        return;        
-
-    if (manager->modem_recovery_timer) {
-        g_source_remove(manager->modem_recovery_timer);
-        manager->modem_recovery_timer = 0;
-    }
-
-    if (!manager->modem_usb_id) {
-        g_warning("Unknown modem USB ID");
-        goto error;
-    }
-
     len = strlen(manager->modem_usb_id);
 
-    manager->modem_state = EG25_STATE_RESETTING;
-
     fd = open("/sys/bus/usb/drivers/usb/unbind", O_WRONLY);
-    if (fd < 0)
-        goto error;
+    if (fd < 0) {
+        g_warning("error opening /sys/bus/usb/drivers/usb/unbind: %d", fd);
+        return FALSE;
+    }
+
     ret = write(fd, manager->modem_usb_id, len);
     if (ret < len)
         g_warning("Couldn't unbind modem: wrote %d/%d bytes", ret, len);
     close(fd);
 
     fd = open("/sys/bus/usb/drivers/usb/bind", O_WRONLY);
-    if (fd < 0)
-        goto error;
+    if (fd < 0) {
+        g_warning("error opening /sys/bus/usb/drivers/usb/bind: %d", fd);
+        return FALSE;
+    }
+
     ret = write(fd, manager->modem_usb_id, len);
-    if (ret < len)
-        g_warning("Couldn't bind modem: wrote %d/%d bytes", ret, len);
     close(fd);
+    if (ret < len) {
+        g_warning("Couldn't bind modem: wrote %d/%d bytes", ret, len);
+        return FALSE;
+    }
 
-    /*
-     * 3s is long enough to make sure the modem has been bound back and
-     * short enough to ensure it hasn't been acquired by ModemManager
-     */
-    manager->reset_timer = g_timeout_add_seconds(3, G_SOURCE_FUNC(modem_reset_done), manager);
+    return TRUE;
+}
+
+static void modem_reset_powerdown_cb(struct EG25Manager *manager) {
+    manager->modem_reset_step = EG25_RESET_STEP_START;
+    modem_reset_step_next(manager);
+}
 
-    return;
+static gboolean modem_reset_timeout(struct EG25Manager *manager)
+{
+    manager->modem_recovery_timer = 0;
+    manager->modem_reset_step = EG25_RESET_STEP_STOP;
+    modem_reset_step_next(manager);
 
-error:
-    // Release blocking sleep inhibitor
-    if (manager->suspend_block_fd >= 0)
-        suspend_inhibit(manager, FALSE, TRUE);
-    if (manager->modem_boot_timer) {
-        g_source_remove(manager->modem_boot_timer);
-        manager->modem_boot_timer = 0;
+    return G_SOURCE_REMOVE;
+}
+
+void modem_reset_step_next(struct EG25Manager *manager)
+{
+    switch (manager->modem_reset_step) {
+    case EG25_RESET_STEP_FIRST:
+        manager->modem_state = EG25_STATE_RESETTING;
+        manager->modem_reset_step++;
+        // fall through
+
+    case EG25_RESET_STEP_REBIND:
+        if (manager->modem_usb_id && modem_reset_rebind(manager)) {
+            // This is cleared in udev.c if the modem comes back online,
+            // otherwise it will go to EG25_RESET_STEP_STOP
+            manager->modem_recovery_timer = g_timeout_add_seconds(manager->modem_recovery_timeout,
+                                                                  G_SOURCE_FUNC(modem_reset_timeout),
+                                                                  manager);
+        } else {
+            manager->modem_reset_step = EG25_RESET_STEP_STOP;
+            modem_reset_step_next(manager);
+        }
+        break;
+
+    case EG25_RESET_STEP_ONLINE:
+        if (manager->port_status == MODEM_PORTS_ONLINE) {
+            g_debug("Modem re-appeared, reset succeeded");
+
+            manager->modem_reset_step = EG25_RESET_STEP_LAST;
+            modem_reset_step_next(manager);
+            break;
+        }
+
+        g_warning("Modem re-appeared, but isn't fully operational, restarting");
+        manager->modem_reset_step++;
+        // fall thorough
+
+    case EG25_RESET_STEP_STOP:
+        g_message("Restarting modem");
+        manager->modem_state = EG25_STATE_FINISHING;
+
+        if (!gpio_check_poweroff(manager)) {
+            // Restart the modem if it's on
+            modem_powerdown(manager, modem_reset_powerdown_cb);
+            break;
+        } else {
+            g_debug("Modem reports being offline starting...");
+        }
+
+        manager->modem_reset_step++;
+        // fall through
+    case EG25_RESET_STEP_START:
+        if (!gpio_check_poweroff(manager) || manager->modem_usb_id != NULL) {
+            // Force a reset if the modem is on, but reports being off
+            g_warning("Forcing modem to reset");
+            gpio_sequence_force_reset(manager);
+        } else {
+            // start the modem if it's off
+            modem_start(manager);
+        }
+
+        manager->modem_reset_step++;
+        // fall through
+
+    case EG25_RESET_STEP_LAST:
+        g_message("Modem reset finished");
+        manager->modem_reset_step = EG25_RESET_NOT_IN_PROGRESS;
+        break;
+
+    default:
+        return;
     }
-    // Everything else failed, reboot the modem
-    at_sequence_reset(manager);
+}
+
+void modem_reset(struct EG25Manager *manager)
+{
+    if (manager->modem_reset_step) {
+        g_warning("Modem reset already in progress");
+        return;
+    }
+
+    /*
+     * If we are managing the modem through lets say ofono, we should not
+     * reset the modem based on the availability of USB ID
+     * TODO: Improve ofono plugin and add support for fetching USB ID
+     */
+    if (manager->modem_iface != MODEM_IFACE_MODEMMANAGER)
+        return;
+
+    g_debug("Resetting modem");
+    manager->modem_reset_step = EG25_RESET_STEP_FIRST;
+    modem_reset_step_next(manager);
 }
 
 void modem_suspend_pre(struct EG25Manager *manager)
diff --git a/src/manager.h b/src/manager.h
index bd762a5..a6cbe79 100644
--- a/src/manager.h
+++ b/src/manager.h
@@ -45,7 +45,7 @@ typedef enum {
 enum EG25State {
     EG25_STATE_INIT = 0,
     EG25_STATE_POWERED, // Power-on sequence has been executed, but the modem isn't on yet
-    EG25_STATE_STARTED, // Modem has been started and declared itdata ready
+    EG25_STATE_STARTED, // Modem has been started and declared it data ready
     EG25_STATE_ACQUIRED, // Modem has been probed by ModemManager
     EG25_STATE_CONFIGURED, // Modem has been configured through AT commands
     EG25_STATE_SUSPENDING, // System is going into suspend
@@ -56,6 +56,16 @@ enum EG25State {
     EG25_STATE_FINISHING
 };
 
+enum EG25ResetStep {
+    EG25_RESET_NOT_IN_PROGRESS = 0,
+    EG25_RESET_STEP_FIRST,
+    EG25_RESET_STEP_REBIND,
+    EG25_RESET_STEP_ONLINE,
+    EG25_RESET_STEP_STOP,
+    EG25_RESET_STEP_START,
+    EG25_RESET_STEP_LAST,
+};
+
 enum ModemIface {
     MODEM_IFACE_NONE = 0,
     MODEM_IFACE_MODEMMANAGER,
@@ -72,12 +82,15 @@ struct modem_status_callback {
 
 struct EG25Manager {
     GMainLoop *loop;
-    guint reset_timer;
     gboolean use_libusb;
     guint usb_vid;
     guint usb_pid;
     gulong poweron_delay;
 
+    guint reset_timer;
+    guint reset_done_timer;
+    enum EG25ResetStep modem_reset_step;
+
     int at_fd;
     guint at_source;
     GList *at_cmds;
@@ -129,6 +142,7 @@ struct EG25Manager {
 };
 
 void modem_configure(struct EG25Manager *data);
+void modem_reset_step_next(struct EG25Manager *manager);
 void modem_reset(struct EG25Manager *data);
 void modem_suspend_pre(struct EG25Manager *data);
 void modem_suspend_post(struct EG25Manager *data);
diff --git a/src/udev.c b/src/udev.c
index a53c346..6c23dd8 100644
--- a/src/udev.c
+++ b/src/udev.c
@@ -84,16 +84,68 @@ static void remove_device(GUdevDevice *device, struct EG25Manager *manager) {
     }
 }
 
+static gboolean modem_reset_done(struct EG25Manager* manager)
+{
+    manager->reset_done_timer = 0;
+
+    if (manager->modem_reset_step == EG25_RESET_STEP_REBIND) {
+        manager->modem_reset_step = EG25_RESET_STEP_ONLINE;
+        modem_reset_step_next(manager);
+    }
+
+    return G_SOURCE_REMOVE;
+}
+
+static gboolean modem_reset_once(struct EG25Manager *manager) {
+    // Only reset if the modem is still offline
+    if (!manager->modem_usb_id || manager->port_status != MODEM_PORTS_ONLINE) {
+        manager->reset_timer = 0;
+        modem_reset(manager);
+    }
+
+    return G_SOURCE_REMOVE;
+}
+
 static void udev_event_cb(GUdevClient *client, gchar *action, GUdevDevice *device, struct EG25Manager *manager)
 {
     const gchar *device_name = g_udev_device_get_name(device);
 
     if (g_str_equal(action, "bind") && is_modem_port(device, manager)) {
         bind_device(device, manager);
+
+        if (manager->modem_reset_step == EG25_RESET_STEP_REBIND) {
+            if (manager->modem_recovery_timer) {
+                g_debug("Clearing modem_recovery_timer");
+                g_source_remove(manager->modem_recovery_timer);
+                manager->modem_recovery_timer = 0;
+            }
+
+            // Clear the timer so we can extend it
+            if (manager->reset_done_timer)
+                g_source_remove(manager->reset_done_timer);
+
+            manager->reset_done_timer = g_timeout_add_seconds(1, G_SOURCE_FUNC(modem_reset_done), manager);
+        }
     } else if (g_str_equal(action, "unbind") && is_modem_port(device, manager)) {
         remove_device(device, manager);
+
+        // We expect unbind events in some cases so ignore those
+        if (manager->modem_state != EG25_STATE_FINISHING &&
+            manager->modem_state != EG25_STATE_RESUMING &&
+            !manager->modem_reset_step) {
+            // Clear the timer so we can extend it
+            if (manager->reset_timer)
+                g_source_remove(manager->reset_timer);
+            else
+                g_message("Lost modem port, scheduling reset...");
+
+            // Wait in case there are more udev events to process first, and
+            // give the modem a chance to correct the issue on its own
+            manager->reset_timer = g_timeout_add_seconds(manager->modem_recovery_timeout, G_SOURCE_FUNC(modem_reset_once), manager);
+        }
     } else if (g_str_equal(action, "add") && is_modem_root(device, manager)) {
         g_debug("Modem root device %s appeared", device_name);
+
         manager->modem_usb_id = g_strdup(device_name);
         manager->port_status = MODEM_PORTS_OFFLINE;
     } else if (g_str_equal(action, "remove") && is_modem_root(device, manager)) {
@@ -139,6 +191,11 @@ void udev_destroy (struct EG25Manager *manager)
 {
     g_list_free_full(manager->tracked_ports, g_free);
 
+    if (manager->reset_done_timer) {
+        g_source_remove(manager->reset_done_timer);
+        manager->reset_done_timer = 0;
+    }
+
     if (manager->udev) {
         g_object_unref(manager->udev);
         manager->udev = NULL;
-- 
GitLab

