diff --git a/drivers/media/i2c/ov8856.c b/drivers/media/i2c/ov8856.c
index aa74744..1882d10 100644
--- a/drivers/media/i2c/ov8856.c
+++ b/drivers/media/i2c/ov8856.c
@@ -18,11 +18,18 @@
 #define OV8856_REG_VALUE_16BIT		2
 #define OV8856_REG_VALUE_24BIT		3
 
+#define OV8856_LINK_FREQ_360MHZ		360000000ULL
+#define OV8856_LINK_FREQ_180MHZ		180000000ULL
 #define OV8856_SCLK			144000000ULL
 #define OV8856_XVCLK_19_2		19200000
+#define OV8856_XVCLK_24			24000000
 #define OV8856_DATA_LANES		4
 #define OV8856_RGB_DEPTH		10
 
+#define REG_X_ADDR_START		0x3808
+#define X_OUTPUT_FULL_SIZE		0x0cc0
+#define X_OUTPUT_BINNING_SIZE		0x0660
+
 #define OV8856_REG_CHIP_ID		0x300a
 #define OV8856_CHIP_ID			0x00885a
 
@@ -30,8 +37,7 @@
 #define OV8856_MODE_STANDBY		0x00
 #define OV8856_MODE_STREAMING		0x01
 
-/* module revisions */
-#define OV8856_2A_MODULE		0x01
+/* define 1B module revision */
 #define OV8856_1B_MODULE		0x02
 
 /* the OTP read-out buffer is at 0x7000 and 0xf is the offset
@@ -43,6 +49,10 @@
 #define OV8856_OTP_MODE_AUTO		0x00
 #define OV8856_OTP_LOAD_CTRL_ENABLE	BIT(0)
 
+/* Analog control register that decided by module revision */
+#define OV8856_ANAL_MODE_CTRL		0x3614
+#define OV8856_ANAL_1B_VAL		0x20
+
 /* vertical-timings from sensor */
 #define OV8856_REG_VTS			0x380e
 #define OV8856_VTS_MAX			0x7fff
@@ -76,29 +86,6 @@
 #define OV8856_TEST_PATTERN_ENABLE	BIT(7)
 #define OV8856_TEST_PATTERN_BAR_SHIFT	2
 
-#define NUM_REGS				7
-#define NUM_MODE_REGS				187
-#define NUM_MODE_REGS_2				200
-
-/* Flip Mirror Controls from sensor */
-#define OV8856_REG_FORMAT1			0x3820
-#define OV8856_REG_FORMAT2			0x3821
-#define OV8856_REG_FORMAT1_OP_1			BIT(1)
-#define OV8856_REG_FORMAT1_OP_2			BIT(2)
-#define OV8856_REG_FORMAT1_OP_3			BIT(6)
-#define OV8856_REG_FORMAT2_OP_1			BIT(1)
-#define OV8856_REG_FORMAT2_OP_2			BIT(2)
-#define OV8856_REG_FORMAT2_OP_3			BIT(6)
-#define OV8856_REG_FLIP_OPT_1			0x376b
-#define OV8856_REG_FLIP_OPT_2			0x5001
-#define OV8856_REG_FLIP_OPT_3			0x502e
-#define OV8856_REG_MIRROR_OPT_1			0x5004
-#define OV8856_REG_FLIP_OP_0			BIT(0)
-#define OV8856_REG_FLIP_OP_1			BIT(1)
-#define OV8856_REG_FLIP_OP_2			BIT(2)
-#define OV8856_REG_MIRROR_OP_1			BIT(1)
-#define OV8856_REG_MIRROR_OP_2			BIT(2)
-
 #define to_ov8856(_sd)			container_of(_sd, struct ov8856, sd)
 
 static const char * const ov8856_supply_names[] = {
@@ -107,6 +94,13 @@ static const char * const ov8856_supply_names[] = {
 	"dvdd",		/* Digital core power */
 };
 
+#define OV8856_NUM_SUPPLIES ARRAY_SIZE(ov8856_supply_names)
+
+enum {
+	OV8856_LINK_FREQ_720MBPS,
+	OV8856_LINK_FREQ_360MBPS,
+};
+
 struct ov8856_reg {
 	u16 address;
 	u8 val;
@@ -142,1234 +136,812 @@ struct ov8856_mode {
 
 	/* Sensor register settings for this resolution */
 	const struct ov8856_reg_list reg_list;
-
-	/* Number of data lanes */
-	u8 data_lanes;
-};
-
-struct ov8856_mipi_data_rates {
-	const struct ov8856_reg regs_0[NUM_REGS];
-	const struct ov8856_reg regs_1[NUM_REGS];
-};
-
-static const struct ov8856_mipi_data_rates mipi_data_rate_lane_2 = {
-	//mipi_data_rate_1440mbps
-	{
-		{0x0103, 0x01},
-		{0x0100, 0x00},
-		{0x0302, 0x43},
-		{0x0303, 0x00},
-		{0x030b, 0x02},
-		{0x030d, 0x4b},
-		{0x031e, 0x0c}
-	},
-	//mipi_data_rate_720mbps
-	{
-		{0x0103, 0x01},
-		{0x0100, 0x00},
-		{0x0302, 0x4b},
-		{0x0303, 0x01},
-		{0x030b, 0x02},
-		{0x030d, 0x4b},
-		{0x031e, 0x0c}
-	}
 };
 
-static const struct ov8856_mipi_data_rates mipi_data_rate_lane_4 = {
-	//mipi_data_rate_720mbps
-	{
-		{0x0103, 0x01},
-		{0x0100, 0x00},
-		{0x0302, 0x4b},
-		{0x0303, 0x01},
-		{0x030b, 0x02},
-		{0x030d, 0x4b},
-		{0x031e, 0x0c}
-	},
-	//mipi_data_rate_360mbps
-	{
-		{0x0103, 0x01},
-		{0x0100, 0x00},
-		{0x0302, 0x4b},
-		{0x0303, 0x03},
-		{0x030b, 0x02},
-		{0x030d, 0x4b},
-		{0x031e, 0x0c}
-	}
+static const struct ov8856_reg mipi_data_rate_720mbps[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+	{0x0302, 0x4b},
+	{0x0303, 0x01},
+	{0x030b, 0x02},
+	{0x030d, 0x4b},
+	{0x031e, 0x0c},
 };
 
-static const struct ov8856_reg lane_2_mode_3280x2464[] = {
-	/* 3280x2464 resolution */
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x32},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x9a},
-		{0x3502, 0x20},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x50},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366e, 0x10},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x23},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x04},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x06},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xa7},
-		{0x3808, 0x0c},
-		{0x3809, 0xd0},
-		{0x380a, 0x09},
-		{0x380b, 0xa0},
-		{0x380c, 0x07},
-		{0x380d, 0x88},
-		{0x380e, 0x09},
-		{0x380f, 0xb8},
-		{0x3810, 0x00},
-		{0x3811, 0x00},
-		{0x3812, 0x00},
-		{0x3813, 0x01},
-		{0x3814, 0x01},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x00},
-		{0x3820, 0x80},
-		{0x3821, 0x46},
-		{0x382a, 0x01},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3837, 0x10},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x14},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x0b},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x58},
-		{0x481f, 0x27},
-		{0x4837, 0x0c},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x57},
-		{0x5001, 0x0a},
-		{0x5004, 0x04},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5795, 0x02},
-		{0x5796, 0x20},
-		{0x5797, 0x20},
-		{0x5798, 0xd5},
-		{0x5799, 0xd5},
-		{0x579a, 0x00},
-		{0x579b, 0x50},
-		{0x579c, 0x00},
-		{0x579d, 0x2c},
-		{0x579e, 0x0c},
-		{0x579f, 0x40},
-		{0x57a0, 0x09},
-		{0x57a1, 0x40},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00}
+static const struct ov8856_reg mipi_data_rate_360mbps[] = {
+	{0x0103, 0x01},
+	{0x0100, 0x00},
+	{0x0302, 0x4b},
+	{0x0303, 0x03},
+	{0x030b, 0x02},
+	{0x030d, 0x4b},
+	{0x031e, 0x0c},
 };
 
-static const struct ov8856_reg lane_2_mode_1640x1232[] = {
-	/* 1640x1232 resolution */
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x32},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x4c},
-		{0x3502, 0xe0},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x50},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366e, 0x08},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x27},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x14},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x00},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xaf},
-		{0x3808, 0x06},
-		{0x3809, 0x68},
-		{0x380a, 0x04},
-		{0x380b, 0xd0},
-		{0x380c, 0x0c},
-		{0x380d, 0x60},
-		{0x380e, 0x05},
-		{0x380f, 0xea},
-		{0x3810, 0x00},
-		{0x3811, 0x04},
-		{0x3812, 0x00},
-		{0x3813, 0x05},
-		{0x3814, 0x03},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x00},
-		{0x3820, 0x90},
-		{0x3821, 0x67},
-		{0x382a, 0x03},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3837, 0x10},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x14},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x05},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x58},
-		{0x481f, 0x27},
-		{0x4837, 0x16},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x57},
-		{0x5001, 0x0a},
-		{0x5004, 0x04},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5795, 0x00},
-		{0x5796, 0x10},
-		{0x5797, 0x10},
-		{0x5798, 0x73},
-		{0x5799, 0x73},
-		{0x579a, 0x00},
-		{0x579b, 0x28},
-		{0x579c, 0x00},
-		{0x579d, 0x16},
-		{0x579e, 0x06},
-		{0x579f, 0x20},
-		{0x57a0, 0x04},
-		{0x57a1, 0xa0},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00}
+static const struct ov8856_reg mode_3280x2464_regs[] = {
+	{0x3000, 0x20},
+	{0x3003, 0x08},
+	{0x300e, 0x20},
+	{0x3010, 0x00},
+	{0x3015, 0x84},
+	{0x3018, 0x72},
+	{0x3021, 0x23},
+	{0x3033, 0x24},
+	{0x3500, 0x00},
+	{0x3501, 0x9a},
+	{0x3502, 0x20},
+	{0x3503, 0x08},
+	{0x3505, 0x83},
+	{0x3508, 0x01},
+	{0x3509, 0x80},
+	{0x350c, 0x00},
+	{0x350d, 0x80},
+	{0x350e, 0x04},
+	{0x350f, 0x00},
+	{0x3510, 0x00},
+	{0x3511, 0x02},
+	{0x3512, 0x00},
+	{0x3600, 0x72},
+	{0x3601, 0x40},
+	{0x3602, 0x30},
+	{0x3610, 0xc5},
+	{0x3611, 0x58},
+	{0x3612, 0x5c},
+	{0x3613, 0xca},
+	{0x3614, 0x20},
+	{0x3628, 0xff},
+	{0x3629, 0xff},
+	{0x362a, 0xff},
+	{0x3633, 0x10},
+	{0x3634, 0x10},
+	{0x3635, 0x10},
+	{0x3636, 0x10},
+	{0x3663, 0x08},
+	{0x3669, 0x34},
+	{0x366e, 0x10},
+	{0x3706, 0x86},
+	{0x370b, 0x7e},
+	{0x3714, 0x23},
+	{0x3730, 0x12},
+	{0x3733, 0x10},
+	{0x3764, 0x00},
+	{0x3765, 0x00},
+	{0x3769, 0x62},
+	{0x376a, 0x2a},
+	{0x376b, 0x30},
+	{0x3780, 0x00},
+	{0x3781, 0x24},
+	{0x3782, 0x00},
+	{0x3783, 0x23},
+	{0x3798, 0x2f},
+	{0x37a1, 0x60},
+	{0x37a8, 0x6a},
+	{0x37ab, 0x3f},
+	{0x37c2, 0x04},
+	{0x37c3, 0xf1},
+	{0x37c9, 0x80},
+	{0x37cb, 0x16},
+	{0x37cc, 0x16},
+	{0x37cd, 0x16},
+	{0x37ce, 0x16},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x06},
+	{0x3804, 0x0c},
+	{0x3805, 0xdf},
+	{0x3806, 0x09},
+	{0x3807, 0xa7},
+	{0x3808, 0x0c},
+	{0x3809, 0xd0},
+	{0x380a, 0x09},
+	{0x380b, 0xa0},
+	{0x380c, 0x07},
+	{0x380d, 0x88},
+	{0x380e, 0x09},
+	{0x380f, 0xb8},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x01},
+	{0x3814, 0x01},
+	{0x3815, 0x01},
+	{0x3816, 0x00},
+	{0x3817, 0x00},
+	{0x3818, 0x00},
+	{0x3819, 0x10},
+	{0x3820, 0x80},
+	{0x3821, 0x46},
+	{0x382a, 0x01},
+	{0x382b, 0x01},
+	{0x3830, 0x06},
+	{0x3836, 0x02},
+	{0x3862, 0x04},
+	{0x3863, 0x08},
+	{0x3cc0, 0x33},
+	{0x3d85, 0x17},
+	{0x3d8c, 0x73},
+	{0x3d8d, 0xde},
+	{0x4001, 0xe0},
+	{0x4003, 0x40},
+	{0x4008, 0x00},
+	{0x4009, 0x0b},
+	{0x400a, 0x00},
+	{0x400b, 0x84},
+	{0x400f, 0x80},
+	{0x4010, 0xf0},
+	{0x4011, 0xff},
+	{0x4012, 0x02},
+	{0x4013, 0x01},
+	{0x4014, 0x01},
+	{0x4015, 0x01},
+	{0x4042, 0x00},
+	{0x4043, 0x80},
+	{0x4044, 0x00},
+	{0x4045, 0x80},
+	{0x4046, 0x00},
+	{0x4047, 0x80},
+	{0x4048, 0x00},
+	{0x4049, 0x80},
+	{0x4041, 0x03},
+	{0x404c, 0x20},
+	{0x404d, 0x00},
+	{0x404e, 0x20},
+	{0x4203, 0x80},
+	{0x4307, 0x30},
+	{0x4317, 0x00},
+	{0x4503, 0x08},
+	{0x4601, 0x80},
+	{0x4800, 0x44},
+	{0x4816, 0x53},
+	{0x481b, 0x58},
+	{0x481f, 0x27},
+	{0x4837, 0x16},
+	{0x483c, 0x0f},
+	{0x484b, 0x05},
+	{0x5000, 0x57},
+	{0x5001, 0x0a},
+	{0x5004, 0x04},
+	{0x502e, 0x03},
+	{0x5030, 0x41},
+	{0x5780, 0x14},
+	{0x5781, 0x0f},
+	{0x5782, 0x44},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x0f},
+	{0x578a, 0xfd},
+	{0x578b, 0xf5},
+	{0x578c, 0xf5},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x52},
+	{0x5794, 0xa3},
+	{0x5795, 0x02},
+	{0x5796, 0x20},
+	{0x5797, 0x20},
+	{0x5798, 0xd5},
+	{0x5799, 0xd5},
+	{0x579a, 0x00},
+	{0x579b, 0x50},
+	{0x579c, 0x00},
+	{0x579d, 0x2c},
+	{0x579e, 0x0c},
+	{0x579f, 0x40},
+	{0x57a0, 0x09},
+	{0x57a1, 0x40},
+	{0x59f8, 0x3d},
+	{0x5a08, 0x02},
+	{0x5b00, 0x02},
+	{0x5b01, 0x10},
+	{0x5b02, 0x03},
+	{0x5b03, 0xcf},
+	{0x5b05, 0x6c},
+	{0x5e00, 0x00}
 };
 
-static const struct ov8856_reg lane_4_mode_3280x2464[] = {
-	/* 3280x2464 resolution */
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x72},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x9a},
-		{0x3502, 0x20},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x20},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366e, 0x10},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x23},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x04},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x06},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xa7},
-		{0x3808, 0x0c},
-		{0x3809, 0xd0},
-		{0x380a, 0x09},
-		{0x380b, 0xa0},
-		{0x380c, 0x07},
-		{0x380d, 0x88},
-		{0x380e, 0x09},
-		{0x380f, 0xb8},
-		{0x3810, 0x00},
-		{0x3811, 0x00},
-		{0x3812, 0x00},
-		{0x3813, 0x01},
-		{0x3814, 0x01},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x10},
-		{0x3820, 0x80},
-		{0x3821, 0x46},
-		{0x382a, 0x01},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x17},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x0b},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x58},
-		{0x481f, 0x27},
-		{0x4837, 0x16},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x57},
-		{0x5001, 0x0a},
-		{0x5004, 0x04},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x5795, 0x02},
-		{0x5796, 0x20},
-		{0x5797, 0x20},
-		{0x5798, 0xd5},
-		{0x5799, 0xd5},
-		{0x579a, 0x00},
-		{0x579b, 0x50},
-		{0x579c, 0x00},
-		{0x579d, 0x2c},
-		{0x579e, 0x0c},
-		{0x579f, 0x40},
-		{0x57a0, 0x09},
-		{0x57a1, 0x40},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00}
+static const struct ov8856_reg mode_3264x2448_regs[] = {
+	{0x0103, 0x01},
+	{0x0302, 0x3c},
+	{0x0303, 0x01},
+	{0x031e, 0x0c},
+	{0x3000, 0x20},
+	{0x3003, 0x08},
+	{0x300e, 0x20},
+	{0x3010, 0x00},
+	{0x3015, 0x84},
+	{0x3018, 0x72},
+	{0x3021, 0x23},
+	{0x3033, 0x24},
+	{0x3500, 0x00},
+	{0x3501, 0x9a},
+	{0x3502, 0x20},
+	{0x3503, 0x08},
+	{0x3505, 0x83},
+	{0x3508, 0x01},
+	{0x3509, 0x80},
+	{0x350c, 0x00},
+	{0x350d, 0x80},
+	{0x350e, 0x04},
+	{0x350f, 0x00},
+	{0x3510, 0x00},
+	{0x3511, 0x02},
+	{0x3512, 0x00},
+	{0x3600, 0x72},
+	{0x3601, 0x40},
+	{0x3602, 0x30},
+	{0x3610, 0xc5},
+	{0x3611, 0x58},
+	{0x3612, 0x5c},
+	{0x3613, 0xca},
+	{0x3614, 0x60},
+	{0x3628, 0xff},
+	{0x3629, 0xff},
+	{0x362a, 0xff},
+	{0x3633, 0x10},
+	{0x3634, 0x10},
+	{0x3635, 0x10},
+	{0x3636, 0x10},
+	{0x3663, 0x08},
+	{0x3669, 0x34},
+	{0x366d, 0x00},
+	{0x366e, 0x10},
+	{0x3706, 0x86},
+	{0x370b, 0x7e},
+	{0x3714, 0x23},
+	{0x3730, 0x12},
+	{0x3733, 0x10},
+	{0x3764, 0x00},
+	{0x3765, 0x00},
+	{0x3769, 0x62},
+	{0x376a, 0x2a},
+	{0x376b, 0x30},
+	{0x3780, 0x00},
+	{0x3781, 0x24},
+	{0x3782, 0x00},
+	{0x3783, 0x23},
+	{0x3798, 0x2f},
+	{0x37a1, 0x60},
+	{0x37a8, 0x6a},
+	{0x37ab, 0x3f},
+	{0x37c2, 0x04},
+	{0x37c3, 0xf1},
+	{0x37c9, 0x80},
+	{0x37cb, 0x16},
+	{0x37cc, 0x16},
+	{0x37cd, 0x16},
+	{0x37ce, 0x16},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x0c},
+	{0x3804, 0x0c},
+	{0x3805, 0xdf},
+	{0x3806, 0x09},
+	{0x3807, 0xa3},
+	{0x3808, 0x0c},
+	{0x3809, 0xc0},
+	{0x380a, 0x09},
+	{0x380b, 0x90},
+	{0x380c, 0x07},
+	{0x380d, 0x8c},
+	{0x380e, 0x09},
+	{0x380f, 0xb2},
+	{0x3810, 0x00},
+	{0x3811, 0x04},
+	{0x3812, 0x00},
+	{0x3813, 0x02},
+	{0x3814, 0x01},
+	{0x3815, 0x01},
+	{0x3816, 0x00},
+	{0x3817, 0x00},
+	{0x3818, 0x00},
+	{0x3819, 0x10},
+	{0x3820, 0x80},
+	{0x3821, 0x46},
+	{0x382a, 0x01},
+	{0x382b, 0x01},
+	{0x3830, 0x06},
+	{0x3836, 0x02},
+	{0x3862, 0x04},
+	{0x3863, 0x08},
+	{0x3cc0, 0x33},
+	{0x3d85, 0x17},
+	{0x3d8c, 0x73},
+	{0x3d8d, 0xde},
+	{0x4001, 0xe0},
+	{0x4003, 0x40},
+	{0x4008, 0x00},
+	{0x4009, 0x0b},
+	{0x400a, 0x00},
+	{0x400b, 0x84},
+	{0x400f, 0x80},
+	{0x4010, 0xf0},
+	{0x4011, 0xff},
+	{0x4012, 0x02},
+	{0x4013, 0x01},
+	{0x4014, 0x01},
+	{0x4015, 0x01},
+	{0x4042, 0x00},
+	{0x4043, 0x80},
+	{0x4044, 0x00},
+	{0x4045, 0x80},
+	{0x4046, 0x00},
+	{0x4047, 0x80},
+	{0x4048, 0x00},
+	{0x4049, 0x80},
+	{0x4041, 0x03},
+	{0x404c, 0x20},
+	{0x404d, 0x00},
+	{0x404e, 0x20},
+	{0x4203, 0x80},
+	{0x4307, 0x30},
+	{0x4317, 0x00},
+	{0x4502, 0x50},
+	{0x4503, 0x08},
+	{0x4601, 0x80},
+	{0x4800, 0x44},
+	{0x4816, 0x53},
+	{0x481b, 0x50},
+	{0x481f, 0x27},
+	{0x4823, 0x3c},
+	{0x482b, 0x00},
+	{0x4831, 0x66},
+	{0x4837, 0x16},
+	{0x483c, 0x0f},
+	{0x484b, 0x05},
+	{0x5000, 0x77},
+	{0x5001, 0x0a},
+	{0x5003, 0xc8},
+	{0x5004, 0x04},
+	{0x5006, 0x00},
+	{0x5007, 0x00},
+	{0x502e, 0x03},
+	{0x5030, 0x41},
+	{0x5780, 0x14},
+	{0x5781, 0x0f},
+	{0x5782, 0x44},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x0f},
+	{0x578a, 0xfd},
+	{0x578b, 0xf5},
+	{0x578c, 0xf5},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x52},
+	{0x5794, 0xa3},
+	{0x5795, 0x02},
+	{0x5796, 0x20},
+	{0x5797, 0x20},
+	{0x5798, 0xd5},
+	{0x5799, 0xd5},
+	{0x579a, 0x00},
+	{0x579b, 0x50},
+	{0x579c, 0x00},
+	{0x579d, 0x2c},
+	{0x579e, 0x0c},
+	{0x579f, 0x40},
+	{0x57a0, 0x09},
+	{0x57a1, 0x40},
+	{0x59f8, 0x3d},
+	{0x5a08, 0x02},
+	{0x5b00, 0x02},
+	{0x5b01, 0x10},
+	{0x5b02, 0x03},
+	{0x5b03, 0xcf},
+	{0x5b05, 0x6c},
+	{0x5e00, 0x00},
+	{0x5e10, 0xfc}
 };
 
-static const struct ov8856_reg lane_4_mode_1640x1232[] = {
-	/* 1640x1232 resolution */
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x72},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x4c},
-		{0x3502, 0xe0},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x20},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366e, 0x08},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x27},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x14},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x00},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xaf},
-		{0x3808, 0x06},
-		{0x3809, 0x68},
-		{0x380a, 0x04},
-		{0x380b, 0xd0},
-		{0x380c, 0x0e},
-		{0x380d, 0xec},
-		{0x380e, 0x04},
-		{0x380f, 0xe8},
-		{0x3810, 0x00},
-		{0x3811, 0x04},
-		{0x3812, 0x00},
-		{0x3813, 0x05},
-		{0x3814, 0x03},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x10},
-		{0x3820, 0x90},
-		{0x3821, 0x67},
-		{0x382a, 0x03},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x17},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x05},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x58},
-		{0x481f, 0x27},
-		{0x4837, 0x16},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x57},
-		{0x5001, 0x0a},
-		{0x5004, 0x04},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x5795, 0x00},
-		{0x5796, 0x10},
-		{0x5797, 0x10},
-		{0x5798, 0x73},
-		{0x5799, 0x73},
-		{0x579a, 0x00},
-		{0x579b, 0x28},
-		{0x579c, 0x00},
-		{0x579d, 0x16},
-		{0x579e, 0x06},
-		{0x579f, 0x20},
-		{0x57a0, 0x04},
-		{0x57a1, 0xa0},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00}
+static const struct ov8856_reg mode_1640x1232_regs[] = {
+	{0x3000, 0x20},
+	{0x3003, 0x08},
+	{0x300e, 0x20},
+	{0x3010, 0x00},
+	{0x3015, 0x84},
+	{0x3018, 0x72},
+	{0x3021, 0x23},
+	{0x3033, 0x24},
+	{0x3500, 0x00},
+	{0x3501, 0x4c},
+	{0x3502, 0xe0},
+	{0x3503, 0x08},
+	{0x3505, 0x83},
+	{0x3508, 0x01},
+	{0x3509, 0x80},
+	{0x350c, 0x00},
+	{0x350d, 0x80},
+	{0x350e, 0x04},
+	{0x350f, 0x00},
+	{0x3510, 0x00},
+	{0x3511, 0x02},
+	{0x3512, 0x00},
+	{0x3600, 0x72},
+	{0x3601, 0x40},
+	{0x3602, 0x30},
+	{0x3610, 0xc5},
+	{0x3611, 0x58},
+	{0x3612, 0x5c},
+	{0x3613, 0xca},
+	{0x3614, 0x20},
+	{0x3628, 0xff},
+	{0x3629, 0xff},
+	{0x362a, 0xff},
+	{0x3633, 0x10},
+	{0x3634, 0x10},
+	{0x3635, 0x10},
+	{0x3636, 0x10},
+	{0x3663, 0x08},
+	{0x3669, 0x34},
+	{0x366e, 0x08},
+	{0x3706, 0x86},
+	{0x370b, 0x7e},
+	{0x3714, 0x27},
+	{0x3730, 0x12},
+	{0x3733, 0x10},
+	{0x3764, 0x00},
+	{0x3765, 0x00},
+	{0x3769, 0x62},
+	{0x376a, 0x2a},
+	{0x376b, 0x30},
+	{0x3780, 0x00},
+	{0x3781, 0x24},
+	{0x3782, 0x00},
+	{0x3783, 0x23},
+	{0x3798, 0x2f},
+	{0x37a1, 0x60},
+	{0x37a8, 0x6a},
+	{0x37ab, 0x3f},
+	{0x37c2, 0x14},
+	{0x37c3, 0xf1},
+	{0x37c9, 0x80},
+	{0x37cb, 0x16},
+	{0x37cc, 0x16},
+	{0x37cd, 0x16},
+	{0x37ce, 0x16},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x06},
+	{0x3804, 0x0c},
+	{0x3805, 0xdf},
+	{0x3806, 0x09},
+	{0x3807, 0xa7},
+	{0x3808, 0x06},
+	{0x3809, 0x68},
+	{0x380a, 0x04},
+	{0x380b, 0xd0},
+	{0x380c, 0x0e},
+	{0x380d, 0xec},
+	{0x380e, 0x04},
+	{0x380f, 0xe8},
+	{0x3810, 0x00},
+	{0x3811, 0x00},
+	{0x3812, 0x00},
+	{0x3813, 0x01},
+	{0x3814, 0x03},
+	{0x3815, 0x01},
+	{0x3816, 0x00},
+	{0x3817, 0x00},
+	{0x3818, 0x00},
+	{0x3819, 0x10},
+	{0x3820, 0x90},
+	{0x3821, 0x67},
+	{0x382a, 0x03},
+	{0x382b, 0x01},
+	{0x3830, 0x06},
+	{0x3836, 0x02},
+	{0x3862, 0x04},
+	{0x3863, 0x08},
+	{0x3cc0, 0x33},
+	{0x3d85, 0x17},
+	{0x3d8c, 0x73},
+	{0x3d8d, 0xde},
+	{0x4001, 0xe0},
+	{0x4003, 0x40},
+	{0x4008, 0x00},
+	{0x4009, 0x05},
+	{0x400a, 0x00},
+	{0x400b, 0x84},
+	{0x400f, 0x80},
+	{0x4010, 0xf0},
+	{0x4011, 0xff},
+	{0x4012, 0x02},
+	{0x4013, 0x01},
+	{0x4014, 0x01},
+	{0x4015, 0x01},
+	{0x4042, 0x00},
+	{0x4043, 0x80},
+	{0x4044, 0x00},
+	{0x4045, 0x80},
+	{0x4046, 0x00},
+	{0x4047, 0x80},
+	{0x4048, 0x00},
+	{0x4049, 0x80},
+	{0x4041, 0x03},
+	{0x404c, 0x20},
+	{0x404d, 0x00},
+	{0x404e, 0x20},
+	{0x4203, 0x80},
+	{0x4307, 0x30},
+	{0x4317, 0x00},
+	{0x4503, 0x08},
+	{0x4601, 0x80},
+	{0x4800, 0x44},
+	{0x4816, 0x53},
+	{0x481b, 0x58},
+	{0x481f, 0x27},
+	{0x4837, 0x16},
+	{0x483c, 0x0f},
+	{0x484b, 0x05},
+	{0x5000, 0x57},
+	{0x5001, 0x0a},
+	{0x5004, 0x04},
+	{0x502e, 0x03},
+	{0x5030, 0x41},
+	{0x5780, 0x14},
+	{0x5781, 0x0f},
+	{0x5782, 0x44},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x0f},
+	{0x578a, 0xfd},
+	{0x578b, 0xf5},
+	{0x578c, 0xf5},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x52},
+	{0x5794, 0xa3},
+	{0x5795, 0x00},
+	{0x5796, 0x10},
+	{0x5797, 0x10},
+	{0x5798, 0x73},
+	{0x5799, 0x73},
+	{0x579a, 0x00},
+	{0x579b, 0x28},
+	{0x579c, 0x00},
+	{0x579d, 0x16},
+	{0x579e, 0x06},
+	{0x579f, 0x20},
+	{0x57a0, 0x04},
+	{0x57a1, 0xa0},
+	{0x59f8, 0x3d},
+	{0x5a08, 0x02},
+	{0x5b00, 0x02},
+	{0x5b01, 0x10},
+	{0x5b02, 0x03},
+	{0x5b03, 0xcf},
+	{0x5b05, 0x6c},
+	{0x5e00, 0x00}
 };
 
-static const struct ov8856_reg lane_4_mode_3264x2448[] = {
-	/* 3264x2448 resolution */
-		{0x0103, 0x01},
-		{0x0302, 0x3c},
-		{0x0303, 0x01},
-		{0x031e, 0x0c},
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x72},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x9a},
-		{0x3502, 0x20},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x60},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366d, 0x00},
-		{0x366e, 0x10},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x23},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x04},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x0c},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xa3},
-		{0x3808, 0x0c},
-		{0x3809, 0xc0},
-		{0x380a, 0x09},
-		{0x380b, 0x90},
-		{0x380c, 0x07},
-		{0x380d, 0x8c},
-		{0x380e, 0x09},
-		{0x380f, 0xb2},
-		{0x3810, 0x00},
-		{0x3811, 0x04},
-		{0x3812, 0x00},
-		{0x3813, 0x01},
-		{0x3814, 0x01},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x10},
-		{0x3820, 0x80},
-		{0x3821, 0x46},
-		{0x382a, 0x01},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x17},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x0b},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4502, 0x50},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x50},
-		{0x481f, 0x27},
-		{0x4823, 0x3c},
-		{0x482b, 0x00},
-		{0x4831, 0x66},
-		{0x4837, 0x16},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x77},
-		{0x5001, 0x0a},
-		{0x5003, 0xc8},
-		{0x5004, 0x04},
-		{0x5006, 0x00},
-		{0x5007, 0x00},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x5795, 0x02},
-		{0x5796, 0x20},
-		{0x5797, 0x20},
-		{0x5798, 0xd5},
-		{0x5799, 0xd5},
-		{0x579a, 0x00},
-		{0x579b, 0x50},
-		{0x579c, 0x00},
-		{0x579d, 0x2c},
-		{0x579e, 0x0c},
-		{0x579f, 0x40},
-		{0x57a0, 0x09},
-		{0x57a1, 0x40},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00},
-		{0x5e10, 0xfc}
-};
-
-static const struct ov8856_reg lane_4_mode_1632x1224[] = {
-	/* 1632x1224 resolution */
-		{0x0103, 0x01},
-		{0x0302, 0x3c},
-		{0x0303, 0x01},
-		{0x031e, 0x0c},
-		{0x3000, 0x20},
-		{0x3003, 0x08},
-		{0x300e, 0x20},
-		{0x3010, 0x00},
-		{0x3015, 0x84},
-		{0x3018, 0x72},
-		{0x3021, 0x23},
-		{0x3033, 0x24},
-		{0x3500, 0x00},
-		{0x3501, 0x4c},
-		{0x3502, 0xe0},
-		{0x3503, 0x08},
-		{0x3505, 0x83},
-		{0x3508, 0x01},
-		{0x3509, 0x80},
-		{0x350c, 0x00},
-		{0x350d, 0x80},
-		{0x350e, 0x04},
-		{0x350f, 0x00},
-		{0x3510, 0x00},
-		{0x3511, 0x02},
-		{0x3512, 0x00},
-		{0x3600, 0x72},
-		{0x3601, 0x40},
-		{0x3602, 0x30},
-		{0x3610, 0xc5},
-		{0x3611, 0x58},
-		{0x3612, 0x5c},
-		{0x3613, 0xca},
-		{0x3614, 0x60},
-		{0x3628, 0xff},
-		{0x3629, 0xff},
-		{0x362a, 0xff},
-		{0x3633, 0x10},
-		{0x3634, 0x10},
-		{0x3635, 0x10},
-		{0x3636, 0x10},
-		{0x3663, 0x08},
-		{0x3669, 0x34},
-		{0x366d, 0x00},
-		{0x366e, 0x08},
-		{0x3706, 0x86},
-		{0x370b, 0x7e},
-		{0x3714, 0x27},
-		{0x3730, 0x12},
-		{0x3733, 0x10},
-		{0x3764, 0x00},
-		{0x3765, 0x00},
-		{0x3769, 0x62},
-		{0x376a, 0x2a},
-		{0x376b, 0x30},
-		{0x3780, 0x00},
-		{0x3781, 0x24},
-		{0x3782, 0x00},
-		{0x3783, 0x23},
-		{0x3798, 0x2f},
-		{0x37a1, 0x60},
-		{0x37a8, 0x6a},
-		{0x37ab, 0x3f},
-		{0x37c2, 0x14},
-		{0x37c3, 0xf1},
-		{0x37c9, 0x80},
-		{0x37cb, 0x16},
-		{0x37cc, 0x16},
-		{0x37cd, 0x16},
-		{0x37ce, 0x16},
-		{0x3800, 0x00},
-		{0x3801, 0x00},
-		{0x3802, 0x00},
-		{0x3803, 0x0c},
-		{0x3804, 0x0c},
-		{0x3805, 0xdf},
-		{0x3806, 0x09},
-		{0x3807, 0xa3},
-		{0x3808, 0x06},
-		{0x3809, 0x60},
-		{0x380a, 0x04},
-		{0x380b, 0xc8},
-		{0x380c, 0x07},
-		{0x380d, 0x8c},
-		{0x380e, 0x09},
-		{0x380f, 0xb2},
-		{0x3810, 0x00},
-		{0x3811, 0x02},
-		{0x3812, 0x00},
-		{0x3813, 0x01},
-		{0x3814, 0x03},
-		{0x3815, 0x01},
-		{0x3816, 0x00},
-		{0x3817, 0x00},
-		{0x3818, 0x00},
-		{0x3819, 0x10},
-		{0x3820, 0x80},
-		{0x3821, 0x47},
-		{0x382a, 0x03},
-		{0x382b, 0x01},
-		{0x3830, 0x06},
-		{0x3836, 0x02},
-		{0x3862, 0x04},
-		{0x3863, 0x08},
-		{0x3cc0, 0x33},
-		{0x3d85, 0x17},
-		{0x3d8c, 0x73},
-		{0x3d8d, 0xde},
-		{0x4001, 0xe0},
-		{0x4003, 0x40},
-		{0x4008, 0x00},
-		{0x4009, 0x05},
-		{0x400a, 0x00},
-		{0x400b, 0x84},
-		{0x400f, 0x80},
-		{0x4010, 0xf0},
-		{0x4011, 0xff},
-		{0x4012, 0x02},
-		{0x4013, 0x01},
-		{0x4014, 0x01},
-		{0x4015, 0x01},
-		{0x4042, 0x00},
-		{0x4043, 0x80},
-		{0x4044, 0x00},
-		{0x4045, 0x80},
-		{0x4046, 0x00},
-		{0x4047, 0x80},
-		{0x4048, 0x00},
-		{0x4049, 0x80},
-		{0x4041, 0x03},
-		{0x404c, 0x20},
-		{0x404d, 0x00},
-		{0x404e, 0x20},
-		{0x4203, 0x80},
-		{0x4307, 0x30},
-		{0x4317, 0x00},
-		{0x4502, 0x50},
-		{0x4503, 0x08},
-		{0x4601, 0x80},
-		{0x4800, 0x44},
-		{0x4816, 0x53},
-		{0x481b, 0x50},
-		{0x481f, 0x27},
-		{0x4823, 0x3c},
-		{0x482b, 0x00},
-		{0x4831, 0x66},
-		{0x4837, 0x16},
-		{0x483c, 0x0f},
-		{0x484b, 0x05},
-		{0x5000, 0x77},
-		{0x5001, 0x0a},
-		{0x5003, 0xc8},
-		{0x5004, 0x04},
-		{0x5006, 0x00},
-		{0x5007, 0x00},
-		{0x502e, 0x03},
-		{0x5030, 0x41},
-		{0x5795, 0x00},
-		{0x5796, 0x10},
-		{0x5797, 0x10},
-		{0x5798, 0x73},
-		{0x5799, 0x73},
-		{0x579a, 0x00},
-		{0x579b, 0x28},
-		{0x579c, 0x00},
-		{0x579d, 0x16},
-		{0x579e, 0x06},
-		{0x579f, 0x20},
-		{0x57a0, 0x04},
-		{0x57a1, 0xa0},
-		{0x5780, 0x14},
-		{0x5781, 0x0f},
-		{0x5782, 0x44},
-		{0x5783, 0x02},
-		{0x5784, 0x01},
-		{0x5785, 0x01},
-		{0x5786, 0x00},
-		{0x5787, 0x04},
-		{0x5788, 0x02},
-		{0x5789, 0x0f},
-		{0x578a, 0xfd},
-		{0x578b, 0xf5},
-		{0x578c, 0xf5},
-		{0x578d, 0x03},
-		{0x578e, 0x08},
-		{0x578f, 0x0c},
-		{0x5790, 0x08},
-		{0x5791, 0x04},
-		{0x5792, 0x00},
-		{0x5793, 0x52},
-		{0x5794, 0xa3},
-		{0x59f8, 0x3d},
-		{0x5a08, 0x02},
-		{0x5b00, 0x02},
-		{0x5b01, 0x10},
-		{0x5b02, 0x03},
-		{0x5b03, 0xcf},
-		{0x5b05, 0x6c},
-		{0x5e00, 0x00},
-		{0x5e10, 0xfc}
+static const struct ov8856_reg mode_1632x1224_regs[] = {
+	{0x0103, 0x01},
+	{0x0302, 0x3c},
+	{0x0303, 0x01},
+	{0x031e, 0x0c},
+	{0x3000, 0x20},
+	{0x3003, 0x08},
+	{0x300e, 0x20},
+	{0x3010, 0x00},
+	{0x3015, 0x84},
+	{0x3018, 0x72},
+	{0x3021, 0x23},
+	{0x3033, 0x24},
+	{0x3500, 0x00},
+	{0x3501, 0x4c},
+	{0x3502, 0xe0},
+	{0x3503, 0x08},
+	{0x3505, 0x83},
+	{0x3508, 0x01},
+	{0x3509, 0x80},
+	{0x350c, 0x00},
+	{0x350d, 0x80},
+	{0x350e, 0x04},
+	{0x350f, 0x00},
+	{0x3510, 0x00},
+	{0x3511, 0x02},
+	{0x3512, 0x00},
+	{0x3600, 0x72},
+	{0x3601, 0x40},
+	{0x3602, 0x30},
+	{0x3610, 0xc5},
+	{0x3611, 0x58},
+	{0x3612, 0x5c},
+	{0x3613, 0xca},
+	{0x3614, 0x60},
+	{0x3628, 0xff},
+	{0x3629, 0xff},
+	{0x362a, 0xff},
+	{0x3633, 0x10},
+	{0x3634, 0x10},
+	{0x3635, 0x10},
+	{0x3636, 0x10},
+	{0x3663, 0x08},
+	{0x3669, 0x34},
+	{0x366d, 0x00},
+	{0x366e, 0x08},
+	{0x3706, 0x86},
+	{0x370b, 0x7e},
+	{0x3714, 0x27},
+	{0x3730, 0x12},
+	{0x3733, 0x10},
+	{0x3764, 0x00},
+	{0x3765, 0x00},
+	{0x3769, 0x62},
+	{0x376a, 0x2a},
+	{0x376b, 0x30},
+	{0x3780, 0x00},
+	{0x3781, 0x24},
+	{0x3782, 0x00},
+	{0x3783, 0x23},
+	{0x3798, 0x2f},
+	{0x37a1, 0x60},
+	{0x37a8, 0x6a},
+	{0x37ab, 0x3f},
+	{0x37c2, 0x14},
+	{0x37c3, 0xf1},
+	{0x37c9, 0x80},
+	{0x37cb, 0x16},
+	{0x37cc, 0x16},
+	{0x37cd, 0x16},
+	{0x37ce, 0x16},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x0c},
+	{0x3804, 0x0c},
+	{0x3805, 0xdf},
+	{0x3806, 0x09},
+	{0x3807, 0xa3},
+	{0x3808, 0x06},
+	{0x3809, 0x60},
+	{0x380a, 0x04},
+	{0x380b, 0xc8},
+	{0x380c, 0x07},
+	{0x380d, 0x8c},
+	{0x380e, 0x09},
+	{0x380f, 0xb2},
+	{0x3810, 0x00},
+	{0x3811, 0x02},
+	{0x3812, 0x00},
+	{0x3813, 0x02},
+	{0x3814, 0x03},
+	{0x3815, 0x01},
+	{0x3816, 0x00},
+	{0x3817, 0x00},
+	{0x3818, 0x00},
+	{0x3819, 0x10},
+	{0x3820, 0x80},
+	{0x3821, 0x47},
+	{0x382a, 0x03},
+	{0x382b, 0x01},
+	{0x3830, 0x06},
+	{0x3836, 0x02},
+	{0x3862, 0x04},
+	{0x3863, 0x08},
+	{0x3cc0, 0x33},
+	{0x3d85, 0x17},
+	{0x3d8c, 0x73},
+	{0x3d8d, 0xde},
+	{0x4001, 0xe0},
+	{0x4003, 0x40},
+	{0x4008, 0x00},
+	{0x4009, 0x05},
+	{0x400a, 0x00},
+	{0x400b, 0x84},
+	{0x400f, 0x80},
+	{0x4010, 0xf0},
+	{0x4011, 0xff},
+	{0x4012, 0x02},
+	{0x4013, 0x01},
+	{0x4014, 0x01},
+	{0x4015, 0x01},
+	{0x4042, 0x00},
+	{0x4043, 0x80},
+	{0x4044, 0x00},
+	{0x4045, 0x80},
+	{0x4046, 0x00},
+	{0x4047, 0x80},
+	{0x4048, 0x00},
+	{0x4049, 0x80},
+	{0x4041, 0x03},
+	{0x404c, 0x20},
+	{0x404d, 0x00},
+	{0x404e, 0x20},
+	{0x4203, 0x80},
+	{0x4307, 0x30},
+	{0x4317, 0x00},
+	{0x4502, 0x50},
+	{0x4503, 0x08},
+	{0x4601, 0x80},
+	{0x4800, 0x44},
+	{0x4816, 0x53},
+	{0x481b, 0x50},
+	{0x481f, 0x27},
+	{0x4823, 0x3c},
+	{0x482b, 0x00},
+	{0x4831, 0x66},
+	{0x4837, 0x16},
+	{0x483c, 0x0f},
+	{0x484b, 0x05},
+	{0x5000, 0x77},
+	{0x5001, 0x0a},
+	{0x5003, 0xc8},
+	{0x5004, 0x04},
+	{0x5006, 0x00},
+	{0x5007, 0x00},
+	{0x502e, 0x03},
+	{0x5030, 0x41},
+	{0x5795, 0x00},
+	{0x5796, 0x10},
+	{0x5797, 0x10},
+	{0x5798, 0x73},
+	{0x5799, 0x73},
+	{0x579a, 0x00},
+	{0x579b, 0x28},
+	{0x579c, 0x00},
+	{0x579d, 0x16},
+	{0x579e, 0x06},
+	{0x579f, 0x20},
+	{0x57a0, 0x04},
+	{0x57a1, 0xa0},
+	{0x5780, 0x14},
+	{0x5781, 0x0f},
+	{0x5782, 0x44},
+	{0x5783, 0x02},
+	{0x5784, 0x01},
+	{0x5785, 0x01},
+	{0x5786, 0x00},
+	{0x5787, 0x04},
+	{0x5788, 0x02},
+	{0x5789, 0x0f},
+	{0x578a, 0xfd},
+	{0x578b, 0xf5},
+	{0x578c, 0xf5},
+	{0x578d, 0x03},
+	{0x578e, 0x08},
+	{0x578f, 0x0c},
+	{0x5790, 0x08},
+	{0x5791, 0x04},
+	{0x5792, 0x00},
+	{0x5793, 0x52},
+	{0x5794, 0xa3},
+	{0x59f8, 0x3d},
+	{0x5a08, 0x02},
+	{0x5b00, 0x02},
+	{0x5b01, 0x10},
+	{0x5b02, 0x03},
+	{0x5b03, 0xcf},
+	{0x5b05, 0x6c},
+	{0x5e00, 0x00},
+	{0x5e10, 0xfc}
 };
 
 static const char * const ov8856_test_pattern_menu[] = {
@@ -1380,14 +952,85 @@ static const char * const ov8856_test_pattern_menu[] = {
 	"Bottom-Top Darker Color Bar"
 };
 
+static const s64 link_freq_menu_items[] = {
+	OV8856_LINK_FREQ_360MHZ,
+	OV8856_LINK_FREQ_180MHZ
+};
+
+static const struct ov8856_link_freq_config link_freq_configs[] = {
+	[OV8856_LINK_FREQ_720MBPS] = {
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mipi_data_rate_720mbps),
+			.regs = mipi_data_rate_720mbps,
+		}
+	},
+	[OV8856_LINK_FREQ_360MBPS] = {
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mipi_data_rate_360mbps),
+			.regs = mipi_data_rate_360mbps,
+		}
+	}
+};
+
+static const struct ov8856_mode supported_modes[] = {
+	{
+		.width = 3280,
+		.height = 2464,
+		.hts = 1928,
+		.vts_def = 2488,
+		.vts_min = 2488,
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mode_3280x2464_regs),
+			.regs = mode_3280x2464_regs,
+		},
+		.link_freq_index = OV8856_LINK_FREQ_720MBPS,
+	},
+	{
+		.width    = 3264,
+		.height   = 2448,
+		.hts      = 1932,
+		.vts_def  = 2482,
+		.vts_min  = 2482,
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mode_3264x2448_regs),
+			.regs = mode_3264x2448_regs,
+		},
+		.link_freq_index = OV8856_LINK_FREQ_720MBPS,
+	},
+	{
+		.width = 1640,
+		.height = 1232,
+		.hts = 3820,
+		.vts_def = 1256,
+		.vts_min = 1256,
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mode_1640x1232_regs),
+			.regs = mode_1640x1232_regs,
+		},
+		.link_freq_index = OV8856_LINK_FREQ_360MBPS,
+	},
+	{
+		.width    = 1632,
+		.height   = 1224,
+		.hts      = 1932,
+		.vts_def  = 2482,
+		.vts_min  = 2482,
+		.reg_list = {
+			.num_of_regs = ARRAY_SIZE(mode_1632x1224_regs),
+			.regs = mode_1632x1224_regs,
+		},
+		.link_freq_index = OV8856_LINK_FREQ_360MBPS,
+	}
+};
+
 struct ov8856 {
 	struct v4l2_subdev sd;
 	struct media_pad pad;
 	struct v4l2_ctrl_handler ctrl_handler;
 
 	struct clk		*xvclk;
-	struct gpio_desc	*reset_gpio;
-	struct regulator_bulk_data supplies[ARRAY_SIZE(ov8856_supply_names)];
+	struct gpio_desc	*n_shutdn_gpio;
+	struct regulator_bulk_data supplies[OV8856_NUM_SUPPLIES];
 
 	/* V4L2 Controls */
 	struct v4l2_ctrl *link_freq;
@@ -1395,10 +1038,18 @@ struct ov8856 {
 	struct v4l2_ctrl *vblank;
 	struct v4l2_ctrl *hblank;
 	struct v4l2_ctrl *exposure;
+	struct v4l2_mbus_framefmt	fmt;
 
 	/* Current mode */
 	const struct ov8856_mode *cur_mode;
 
+	/* module hardware version that can be read out from register 0x700f
+	 * the register value corresponds to different hardware version
+	 * 01: 2A module revision
+	 * 02: 1B module revision
+	 */
+	bool is_1B_revision;
+
 	/* To serialize asynchronus callbacks */
 	struct mutex mutex;
 
@@ -1406,171 +1057,30 @@ struct ov8856 {
 	bool streaming;
 
 	/* lanes index */
-	u8 nlanes;
+        u8 nlanes;
 
-	const struct ov8856_lane_cfg *priv_lane;
-	u8 modes_size;
+        const struct ov8856_lane_cfg *priv_lane;
+        u8 modes_size;
 };
 
 struct ov8856_lane_cfg {
-	const s64 link_freq_menu_items[2];
-	const struct ov8856_link_freq_config link_freq_configs[2];
-	const struct ov8856_mode supported_modes[4];
-};
-
-static const struct ov8856_lane_cfg lane_cfg_2 = {
-	{
-		720000000,
-		360000000,
-	},
-	{{
-		.reg_list = {
-			.num_of_regs =
-			ARRAY_SIZE(mipi_data_rate_lane_2.regs_0),
-			.regs = mipi_data_rate_lane_2.regs_0,
-		}
-	},
-	{
-		.reg_list = {
-			.num_of_regs =
-			ARRAY_SIZE(mipi_data_rate_lane_2.regs_1),
-			.regs = mipi_data_rate_lane_2.regs_1,
-		}
-	}},
-	{{
-		.width = 3280,
-		.height = 2464,
-		.hts = 1928,
-		.vts_def = 2488,
-		.vts_min = 2488,
-		.reg_list = {
-			.num_of_regs =
-			ARRAY_SIZE(lane_2_mode_3280x2464),
-			.regs = lane_2_mode_3280x2464,
-		},
-		.link_freq_index = 0,
-		.data_lanes = 2,
-	},
-	{
-		.width = 1640,
-		.height = 1232,
-		.hts = 3168,
-		.vts_def = 1514,
-		.vts_min = 1514,
-		.reg_list = {
-			.num_of_regs =
-			ARRAY_SIZE(lane_2_mode_1640x1232),
-			.regs = lane_2_mode_1640x1232,
-		},
-		.link_freq_index = 1,
-		.data_lanes = 2,
-	}}
+        const s64 link_freq_menu_items[2];
+        const struct ov8856_link_freq_config link_freq_configs[2];
+        const struct ov8856_mode supported_modes[4];
 };
 
-static const struct ov8856_lane_cfg lane_cfg_4 = {
-		{
-			360000000,
-			180000000,
-		},
-		{{
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(mipi_data_rate_lane_4.regs_0),
-				.regs = mipi_data_rate_lane_4.regs_0,
-			}
-		},
-		{
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(mipi_data_rate_lane_4.regs_1),
-				.regs = mipi_data_rate_lane_4.regs_1,
-			}
-		}},
-		{{
-			.width = 3280,
-			.height = 2464,
-			.hts = 1928,
-			.vts_def = 2488,
-			.vts_min = 2488,
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(lane_4_mode_3280x2464),
-				.regs = lane_4_mode_3280x2464,
-			},
-			.link_freq_index = 0,
-			.data_lanes = 4,
-		},
-		{
-			.width = 1640,
-			.height = 1232,
-			.hts = 3820,
-			.vts_def = 1256,
-			.vts_min = 1256,
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(lane_4_mode_1640x1232),
-				.regs = lane_4_mode_1640x1232,
-			},
-			.link_freq_index = 1,
-			.data_lanes = 4,
-		},
-		{
-			.width = 3264,
-			.height = 2448,
-			.hts = 1932,
-			.vts_def = 2482,
-			.vts_min = 2482,
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(lane_4_mode_3264x2448),
-				.regs = lane_4_mode_3264x2448,
-			},
-			.link_freq_index = 0,
-			.data_lanes = 4,
-		},
-		{
-			.width = 1632,
-			.height = 1224,
-			.hts = 1932,
-			.vts_def = 2482,
-			.vts_min = 2482,
-			.reg_list = {
-				.num_of_regs =
-				 ARRAY_SIZE(lane_4_mode_1632x1224),
-				.regs = lane_4_mode_1632x1224,
-			},
-			.link_freq_index = 1,
-			.data_lanes = 4,
-		}}
-};
-
-static unsigned int ov8856_modes_num(const struct ov8856 *ov8856)
-{
-	unsigned int i, count = 0;
-
-	for (i = 0; i < ARRAY_SIZE(ov8856->priv_lane->supported_modes); i++) {
-		if (ov8856->priv_lane->supported_modes[i].width == 0)
-			break;
-		count++;
-	}
-
-	return count;
-}
-
-static u64 to_rate(const s64 *link_freq_menu_items,
-		   u32 f_index, u8 nlanes)
+static u64 to_pixel_rate(u32 f_index)
 {
-	u64 pixel_rate = link_freq_menu_items[f_index] * 2 * nlanes;
+	u64 pixel_rate = link_freq_menu_items[f_index] * 2 * OV8856_DATA_LANES;
 
 	do_div(pixel_rate, OV8856_RGB_DEPTH);
 
 	return pixel_rate;
 }
 
-static u64 to_pixels_per_line(const s64 *link_freq_menu_items, u32 hts,
-			      u32 f_index, u8 nlanes)
+static u64 to_pixels_per_line(u32 hts, u32 f_index)
 {
-	u64 ppl = hts * to_rate(link_freq_menu_items, f_index, nlanes);
+	u64 ppl = hts * to_pixel_rate(f_index);
 
 	do_div(ppl, OV8856_SCLK);
 
@@ -1672,91 +1182,23 @@ static int ov8856_test_pattern(struct ov8856 *ov8856, u32 pattern)
 				OV8856_REG_VALUE_08BIT, pattern);
 }
 
-static int ov8856_set_ctrl_hflip(struct ov8856 *ov8856, u32 ctrl_val)
+static int ov8856_check_revision(struct ov8856 *ov8856)
 {
 	int ret;
-	u32 val;
-
-	ret = ov8856_read_reg(ov8856, OV8856_REG_MIRROR_OPT_1,
-			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	ret = ov8856_write_reg(ov8856, OV8856_REG_MIRROR_OPT_1,
-			       OV8856_REG_VALUE_08BIT,
-			       ctrl_val ? val & ~OV8856_REG_MIRROR_OP_2 :
-			       val | OV8856_REG_MIRROR_OP_2);
 
+	ret = ov8856_write_reg(ov8856, OV8856_REG_MODE_SELECT,
+			       OV8856_REG_VALUE_08BIT, OV8856_MODE_STREAMING);
 	if (ret)
 		return ret;
 
-	ret = ov8856_read_reg(ov8856, OV8856_REG_FORMAT2,
-			      OV8856_REG_VALUE_08BIT, &val);
+	ret = ov8856_write_reg(ov8856, OV8856_OTP_MODE_CTRL,
+			       OV8856_REG_VALUE_08BIT, OV8856_OTP_MODE_AUTO);
 	if (ret)
 		return ret;
 
-	return ov8856_write_reg(ov8856, OV8856_REG_FORMAT2,
+	return ov8856_write_reg(ov8856, OV8856_OTP_LOAD_CTRL,
 				OV8856_REG_VALUE_08BIT,
-				ctrl_val ? val & ~OV8856_REG_FORMAT2_OP_1 &
-				~OV8856_REG_FORMAT2_OP_2 &
-				~OV8856_REG_FORMAT2_OP_3 :
-				val | OV8856_REG_FORMAT2_OP_1 |
-				OV8856_REG_FORMAT2_OP_2 |
-				OV8856_REG_FORMAT2_OP_3);
-}
-
-static int ov8856_set_ctrl_vflip(struct ov8856 *ov8856, u8 ctrl_val)
-{
-	int ret;
-	u32 val;
-
-	ret = ov8856_read_reg(ov8856, OV8856_REG_FLIP_OPT_1,
-			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	ret = ov8856_write_reg(ov8856, OV8856_REG_FLIP_OPT_1,
-			       OV8856_REG_VALUE_08BIT,
-			       ctrl_val ? val | OV8856_REG_FLIP_OP_1 |
-			       OV8856_REG_FLIP_OP_2 :
-			       val & ~OV8856_REG_FLIP_OP_1 &
-			       ~OV8856_REG_FLIP_OP_2);
-
-	ret = ov8856_read_reg(ov8856, OV8856_REG_FLIP_OPT_2,
-			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	ret = ov8856_write_reg(ov8856, OV8856_REG_FLIP_OPT_2,
-			       OV8856_REG_VALUE_08BIT,
-			       ctrl_val ? val | OV8856_REG_FLIP_OP_2 :
-			       val & ~OV8856_REG_FLIP_OP_2);
-
-	ret = ov8856_read_reg(ov8856, OV8856_REG_FLIP_OPT_3,
-			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	ret = ov8856_write_reg(ov8856, OV8856_REG_FLIP_OPT_3,
-			       OV8856_REG_VALUE_08BIT,
-			       ctrl_val ? val & ~OV8856_REG_FLIP_OP_0 &
-			       ~OV8856_REG_FLIP_OP_1 :
-			       val | OV8856_REG_FLIP_OP_0 |
-			       OV8856_REG_FLIP_OP_1);
-
-	ret = ov8856_read_reg(ov8856, OV8856_REG_FORMAT1,
-			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret)
-		return ret;
-
-	return ov8856_write_reg(ov8856, OV8856_REG_FORMAT1,
-			       OV8856_REG_VALUE_08BIT,
-			       ctrl_val ? val | OV8856_REG_FORMAT1_OP_1 |
-			       OV8856_REG_FORMAT1_OP_3 |
-			       OV8856_REG_FORMAT1_OP_2 :
-			       val & ~OV8856_REG_FORMAT1_OP_1 &
-			       ~OV8856_REG_FORMAT1_OP_3 &
-			       ~OV8856_REG_FORMAT1_OP_2);
+				OV8856_OTP_LOAD_CTRL_ENABLE);
 }
 
 static int ov8856_set_ctrl(struct v4l2_ctrl *ctrl)
@@ -1808,14 +1250,6 @@ static int ov8856_set_ctrl(struct v4l2_ctrl *ctrl)
 		ret = ov8856_test_pattern(ov8856, ctrl->val);
 		break;
 
-	case V4L2_CID_HFLIP:
-		ret = ov8856_set_ctrl_hflip(ov8856, ctrl->val);
-		break;
-
-	case V4L2_CID_VFLIP:
-		ret = ov8856_set_ctrl_vflip(ov8856, ctrl->val);
-		break;
-
 	default:
 		ret = -EINVAL;
 		break;
@@ -1844,32 +1278,23 @@ static int ov8856_init_controls(struct ov8856 *ov8856)
 	ctrl_hdlr->lock = &ov8856->mutex;
 	ov8856->link_freq = v4l2_ctrl_new_int_menu(ctrl_hdlr, &ov8856_ctrl_ops,
 					   V4L2_CID_LINK_FREQ,
-					   ARRAY_SIZE
-					   (ov8856->priv_lane->link_freq_menu_items)
-					   - 1,
-					   0, ov8856->priv_lane->link_freq_menu_items);
+					   ARRAY_SIZE(link_freq_menu_items) - 1,
+					   0, link_freq_menu_items);
 	if (ov8856->link_freq)
 		ov8856->link_freq->flags |= V4L2_CTRL_FLAG_READ_ONLY;
 
 	ov8856->pixel_rate = v4l2_ctrl_new_std(ctrl_hdlr, &ov8856_ctrl_ops,
 				       V4L2_CID_PIXEL_RATE, 0,
-				       to_rate(ov8856->priv_lane->link_freq_menu_items,
-					       0,
-					       ov8856->cur_mode->data_lanes), 1,
-				       to_rate(ov8856->priv_lane->link_freq_menu_items,
-					       0,
-					       ov8856->cur_mode->data_lanes));
+				       to_pixel_rate(OV8856_LINK_FREQ_720MBPS),
+				       1,
+				       to_pixel_rate(OV8856_LINK_FREQ_720MBPS));
 	ov8856->vblank = v4l2_ctrl_new_std(ctrl_hdlr, &ov8856_ctrl_ops,
 			  V4L2_CID_VBLANK,
 			  ov8856->cur_mode->vts_min - ov8856->cur_mode->height,
 			  OV8856_VTS_MAX - ov8856->cur_mode->height, 1,
-			  ov8856->cur_mode->vts_def -
-			  ov8856->cur_mode->height);
-	h_blank = to_pixels_per_line(ov8856->priv_lane->link_freq_menu_items,
-				     ov8856->cur_mode->hts,
-				     ov8856->cur_mode->link_freq_index,
-				     ov8856->cur_mode->data_lanes) -
-				     ov8856->cur_mode->width;
+			  ov8856->cur_mode->vts_def - ov8856->cur_mode->height);
+	h_blank = to_pixels_per_line(ov8856->cur_mode->hts,
+		  ov8856->cur_mode->link_freq_index) - ov8856->cur_mode->width;
 	ov8856->hblank = v4l2_ctrl_new_std(ctrl_hdlr, &ov8856_ctrl_ops,
 					   V4L2_CID_HBLANK, h_blank, h_blank, 1,
 					   h_blank);
@@ -1892,10 +1317,6 @@ static int ov8856_init_controls(struct ov8856 *ov8856)
 				     V4L2_CID_TEST_PATTERN,
 				     ARRAY_SIZE(ov8856_test_pattern_menu) - 1,
 				     0, 0, ov8856_test_pattern_menu);
-	v4l2_ctrl_new_std(ctrl_hdlr, &ov8856_ctrl_ops,
-			  V4L2_CID_HFLIP, 0, 1, 1, 0);
-	v4l2_ctrl_new_std(ctrl_hdlr, &ov8856_ctrl_ops,
-			  V4L2_CID_VFLIP, 0, 1, 1, 0);
 	if (ctrl_hdlr->error)
 		return ctrl_hdlr->error;
 
@@ -1909,7 +1330,6 @@ static void ov8856_update_pad_format(const struct ov8856_mode *mode,
 {
 	fmt->width = mode->width;
 	fmt->height = mode->height;
-	fmt->code = MEDIA_BUS_FMT_SGRBG10_1X10;
 	fmt->field = V4L2_FIELD_NONE;
 }
 
@@ -1918,10 +1338,10 @@ static int ov8856_start_streaming(struct ov8856 *ov8856)
 	struct i2c_client *client = v4l2_get_subdevdata(&ov8856->sd);
 	const struct ov8856_reg_list *reg_list;
 	int link_freq_index, ret;
+	u32 cur_h_size;
 
 	link_freq_index = ov8856->cur_mode->link_freq_index;
-	reg_list = &ov8856->priv_lane->link_freq_configs[link_freq_index].reg_list;
-
+	reg_list = &link_freq_configs[link_freq_index].reg_list;
 	ret = ov8856_write_reg_list(ov8856, reg_list);
 	if (ret) {
 		dev_err(&client->dev, "failed to set plls");
@@ -1935,6 +1355,28 @@ static int ov8856_start_streaming(struct ov8856 *ov8856)
 		return ret;
 	}
 
+	/* Update R3614 if the revision is 1B module */
+	if (ov8856->is_1B_revision) {
+		ret = ov8856_write_reg(ov8856, OV8856_ANAL_MODE_CTRL,
+				       OV8856_REG_VALUE_08BIT,
+				       OV8856_ANAL_1B_VAL);
+		if (ret) {
+			dev_err(&client->dev, "failed to set R3614");
+			return ret;
+		}
+	}
+
+	ret = ov8856_read_reg(ov8856, REG_X_ADDR_START,
+			      OV8856_REG_VALUE_16BIT, &cur_h_size);
+	if (ret) {
+		dev_err(&client->dev, "failed to read out R3614");
+		return ret;
+	}
+
+	if (cur_h_size == X_OUTPUT_FULL_SIZE ||
+	    cur_h_size == X_OUTPUT_BINNING_SIZE)
+		ov8856->fmt.code = MEDIA_BUS_FMT_SBGGR10_1X10;
+
 	ret = __v4l2_ctrl_handler_setup(ov8856->sd.ctrl_handler);
 	if (ret)
 		return ret;
@@ -1969,8 +1411,9 @@ static int ov8856_set_stream(struct v4l2_subdev *sd, int enable)
 
 	mutex_lock(&ov8856->mutex);
 	if (enable) {
-		ret = pm_runtime_resume_and_get(&client->dev);
+		ret = pm_runtime_get_sync(&client->dev);
 		if (ret < 0) {
+			pm_runtime_put_noidle(&client->dev);
 			mutex_unlock(&ov8856->mutex);
 			return ret;
 		}
@@ -1997,34 +1440,27 @@ static int __ov8856_power_on(struct ov8856 *ov8856)
 	struct i2c_client *client = v4l2_get_subdevdata(&ov8856->sd);
 	int ret;
 
-	if (is_acpi_node(dev_fwnode(&client->dev)))
-		return 0;
-
 	ret = clk_prepare_enable(ov8856->xvclk);
 	if (ret < 0) {
 		dev_err(&client->dev, "failed to enable xvclk\n");
 		return ret;
 	}
 
-	if (ov8856->reset_gpio) {
-		gpiod_set_value_cansleep(ov8856->reset_gpio, 1);
-		usleep_range(1000, 2000);
-	}
+	gpiod_set_value_cansleep(ov8856->n_shutdn_gpio, GPIOD_OUT_LOW);
 
-	ret = regulator_bulk_enable(ARRAY_SIZE(ov8856_supply_names),
-				    ov8856->supplies);
+	ret = regulator_bulk_enable(OV8856_NUM_SUPPLIES, ov8856->supplies);
 	if (ret < 0) {
 		dev_err(&client->dev, "failed to enable regulators\n");
 		goto disable_clk;
 	}
 
-	gpiod_set_value_cansleep(ov8856->reset_gpio, 0);
+	gpiod_set_value_cansleep(ov8856->n_shutdn_gpio, GPIOD_OUT_HIGH);
+
 	usleep_range(1500, 1800);
 
 	return 0;
 
 disable_clk:
-	gpiod_set_value_cansleep(ov8856->reset_gpio, 1);
 	clk_disable_unprepare(ov8856->xvclk);
 
 	return ret;
@@ -2032,27 +1468,21 @@ static int __ov8856_power_on(struct ov8856 *ov8856)
 
 static void __ov8856_power_off(struct ov8856 *ov8856)
 {
-	struct i2c_client *client = v4l2_get_subdevdata(&ov8856->sd);
-
-	if (is_acpi_node(dev_fwnode(&client->dev)))
-		return;
-
-	gpiod_set_value_cansleep(ov8856->reset_gpio, 1);
-	regulator_bulk_disable(ARRAY_SIZE(ov8856_supply_names),
-			       ov8856->supplies);
+	gpiod_set_value_cansleep(ov8856->n_shutdn_gpio, GPIOD_OUT_LOW);
+	regulator_bulk_disable(OV8856_NUM_SUPPLIES, ov8856->supplies);
 	clk_disable_unprepare(ov8856->xvclk);
 }
 
 static int __maybe_unused ov8856_suspend(struct device *dev)
 {
-	struct v4l2_subdev *sd = dev_get_drvdata(dev);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
 	struct ov8856 *ov8856 = to_ov8856(sd);
 
 	mutex_lock(&ov8856->mutex);
 	if (ov8856->streaming)
 		ov8856_stop_streaming(ov8856);
 
-	__ov8856_power_off(ov8856);
 	mutex_unlock(&ov8856->mutex);
 
 	return 0;
@@ -2060,13 +1490,12 @@ static int __maybe_unused ov8856_suspend(struct device *dev)
 
 static int __maybe_unused ov8856_resume(struct device *dev)
 {
-	struct v4l2_subdev *sd = dev_get_drvdata(dev);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
 	struct ov8856 *ov8856 = to_ov8856(sd);
 	int ret;
 
 	mutex_lock(&ov8856->mutex);
-
-	__ov8856_power_on(ov8856);
 	if (ov8856->streaming) {
 		ret = ov8856_start_streaming(ov8856);
 		if (ret) {
@@ -2083,17 +1512,17 @@ static int __maybe_unused ov8856_resume(struct device *dev)
 }
 
 static int ov8856_set_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_state *sd_state,
+                             struct v4l2_subdev_state *sd_state,
 			     struct v4l2_subdev_format *fmt)
 {
 	struct ov8856 *ov8856 = to_ov8856(sd);
 	const struct ov8856_mode *mode;
 	s32 vblank_def, h_blank;
-
+	
 	mode = v4l2_find_nearest_size(ov8856->priv_lane->supported_modes,
-				      ov8856->modes_size,
-				      width, height, fmt->format.width,
-				      fmt->format.height);
+                                      ov8856->modes_size,
+                                      width, height, fmt->format.width,
+                                      fmt->format.height);
 
 	mutex_lock(&ov8856->mutex);
 	ov8856_update_pad_format(mode, &fmt->format);
@@ -2103,9 +1532,7 @@ static int ov8856_set_format(struct v4l2_subdev *sd,
 		ov8856->cur_mode = mode;
 		__v4l2_ctrl_s_ctrl(ov8856->link_freq, mode->link_freq_index);
 		__v4l2_ctrl_s_ctrl_int64(ov8856->pixel_rate,
-					 to_rate(ov8856->priv_lane->link_freq_menu_items,
-						 mode->link_freq_index,
-						 ov8856->cur_mode->data_lanes));
+					 to_pixel_rate(mode->link_freq_index));
 
 		/* Update limits and set FPS to default */
 		vblank_def = mode->vts_def - mode->height;
@@ -2114,11 +1541,8 @@ static int ov8856_set_format(struct v4l2_subdev *sd,
 					 OV8856_VTS_MAX - mode->height, 1,
 					 vblank_def);
 		__v4l2_ctrl_s_ctrl(ov8856->vblank, vblank_def);
-		h_blank = to_pixels_per_line(ov8856->priv_lane->link_freq_menu_items,
-					     mode->hts,
-					     mode->link_freq_index,
-					     ov8856->cur_mode->data_lanes)
-					     - mode->width;
+		h_blank = to_pixels_per_line(mode->hts, mode->link_freq_index) -
+			  mode->width;
 		__v4l2_ctrl_modify_range(ov8856->hblank, h_blank, h_blank, 1,
 					 h_blank);
 	}
@@ -2129,18 +1553,18 @@ static int ov8856_set_format(struct v4l2_subdev *sd,
 }
 
 static int ov8856_get_format(struct v4l2_subdev *sd,
-			     struct v4l2_subdev_state *sd_state,
+			     struct v4l2_subdev_state *sd_state, 
 			     struct v4l2_subdev_format *fmt)
 {
 	struct ov8856 *ov8856 = to_ov8856(sd);
 
 	mutex_lock(&ov8856->mutex);
-	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY)
-		fmt->format = *v4l2_subdev_get_try_format(&ov8856->sd,
-							  sd_state,
+	if (fmt->which == V4L2_SUBDEV_FORMAT_TRY) {
+		fmt->format = *v4l2_subdev_get_try_format(&ov8856->sd, sd_state,
 							  fmt->pad);
-	else
+	} else {
 		ov8856_update_pad_format(ov8856->cur_mode, &fmt->format);
+	}
 
 	mutex_unlock(&ov8856->mutex);
 
@@ -2151,11 +1575,12 @@ static int ov8856_enum_mbus_code(struct v4l2_subdev *sd,
 				 struct v4l2_subdev_state *sd_state,
 				 struct v4l2_subdev_mbus_code_enum *code)
 {
-	/* Only one bayer order GRBG is supported */
+	struct ov8856 *ov8856 = to_ov8856(sd);
+
 	if (code->index > 0)
 		return -EINVAL;
 
-	code->code = MEDIA_BUS_FMT_SGRBG10_1X10;
+	code->code = ov8856->fmt.code;
 
 	return 0;
 }
@@ -2164,17 +1589,15 @@ static int ov8856_enum_frame_size(struct v4l2_subdev *sd,
 				  struct v4l2_subdev_state *sd_state,
 				  struct v4l2_subdev_frame_size_enum *fse)
 {
-	struct ov8856 *ov8856 = to_ov8856(sd);
-
-	if (fse->index >= ov8856->modes_size)
+	if (fse->index >= ARRAY_SIZE(supported_modes))
 		return -EINVAL;
 
 	if (fse->code != MEDIA_BUS_FMT_SGRBG10_1X10)
 		return -EINVAL;
 
-	fse->min_width = ov8856->priv_lane->supported_modes[fse->index].width;
+	fse->min_width = supported_modes[fse->index].width;
 	fse->max_width = fse->min_width;
-	fse->min_height = ov8856->priv_lane->supported_modes[fse->index].height;
+	fse->min_height = supported_modes[fse->index].height;
 	fse->max_height = fse->min_height;
 
 	return 0;
@@ -2233,97 +1656,46 @@ static int ov8856_identify_module(struct ov8856 *ov8856)
 		return -ENXIO;
 	}
 
-	ret = ov8856_write_reg(ov8856, OV8856_REG_MODE_SELECT,
-			       OV8856_REG_VALUE_08BIT, OV8856_MODE_STREAMING);
-	if (ret)
-		return ret;
-
-	ret = ov8856_write_reg(ov8856, OV8856_OTP_MODE_CTRL,
-			       OV8856_REG_VALUE_08BIT, OV8856_OTP_MODE_AUTO);
-	if (ret) {
-		dev_err(&client->dev, "failed to set otp mode");
-		return ret;
-	}
-
-	ret = ov8856_write_reg(ov8856, OV8856_OTP_LOAD_CTRL,
-			       OV8856_REG_VALUE_08BIT,
-			       OV8856_OTP_LOAD_CTRL_ENABLE);
+	/* check sensor hardware revision */
+	ret = ov8856_check_revision(ov8856);
 	if (ret) {
-		dev_err(&client->dev, "failed to enable load control");
+		dev_err(&client->dev, "failed to check sensor revision");
 		return ret;
 	}
 
 	ret = ov8856_read_reg(ov8856, OV8856_MODULE_REVISION,
 			      OV8856_REG_VALUE_08BIT, &val);
-	if (ret) {
-		dev_err(&client->dev, "failed to read module revision");
+	if (ret)
 		return ret;
-	}
 
-	dev_info(&client->dev, "OV8856 revision %x (%s) at address 0x%02x\n",
-		 val,
-		 val == OV8856_2A_MODULE ? "2A" :
-		 val == OV8856_1B_MODULE ? "1B" : "unknown revision",
-		 client->addr);
-
-	ret = ov8856_write_reg(ov8856, OV8856_REG_MODE_SELECT,
-			       OV8856_REG_VALUE_08BIT, OV8856_MODE_STANDBY);
-	if (ret) {
-		dev_err(&client->dev, "failed to exit streaming mode");
-		return ret;
-	}
+	ov8856->is_1B_revision = val == OV8856_1B_MODULE;
 
 	return 0;
 }
 
-static int ov8856_get_hwcfg(struct ov8856 *ov8856, struct device *dev)
+static int ov8856_check_hwcfg(struct device *dev)
 {
 	struct fwnode_handle *ep;
 	struct fwnode_handle *fwnode = dev_fwnode(dev);
 	struct v4l2_fwnode_endpoint bus_cfg = {
 		.bus_type = V4L2_MBUS_CSI2_DPHY
 	};
-	u32 xvclk_rate;
+	u32 mclk;
 	int ret;
-	unsigned int i, j;
+	//unsigned int i, j;
 
 	if (!fwnode)
 		return -ENXIO;
 
-	ret = fwnode_property_read_u32(fwnode, "clock-frequency", &xvclk_rate);
+	ret = fwnode_property_read_u32(fwnode, "clock-frequency", &mclk);
 	if (ret)
 		return ret;
 
-	if (!is_acpi_node(fwnode)) {
-		ov8856->xvclk = devm_clk_get(dev, "xvclk");
-		if (IS_ERR(ov8856->xvclk)) {
-			dev_err(dev, "could not get xvclk clock (%pe)\n",
-				ov8856->xvclk);
-			return PTR_ERR(ov8856->xvclk);
-		}
-
-		clk_set_rate(ov8856->xvclk, xvclk_rate);
-		xvclk_rate = clk_get_rate(ov8856->xvclk);
-
-		ov8856->reset_gpio = devm_gpiod_get_optional(dev, "reset",
-							     GPIOD_OUT_LOW);
-		if (IS_ERR(ov8856->reset_gpio))
-			return PTR_ERR(ov8856->reset_gpio);
-
-		for (i = 0; i < ARRAY_SIZE(ov8856_supply_names); i++)
-			ov8856->supplies[i].supply = ov8856_supply_names[i];
-
-		ret = devm_regulator_bulk_get(dev,
-					      ARRAY_SIZE(ov8856_supply_names),
-					      ov8856->supplies);
-		if (ret)
-			return ret;
+	if (mclk != OV8856_XVCLK_19_2) {
+		dev_err(dev, "external clock %d is not supported", mclk);
+		return -EINVAL;
 	}
 
-	if (xvclk_rate != OV8856_XVCLK_19_2)
-		dev_warn(dev, "external clock rate %u is unsupported",
-			 xvclk_rate);
-
 	ep = fwnode_graph_get_next_endpoint(fwnode, NULL);
 	if (!ep)
 		return -ENXIO;
@@ -2333,45 +1705,33 @@ static int ov8856_get_hwcfg(struct ov8856 *ov8856, struct device *dev)
 	if (ret)
 		return ret;
 
-	/* Get number of data lanes */
-	if (bus_cfg.bus.mipi_csi2.num_data_lanes != 2 &&
-	    bus_cfg.bus.mipi_csi2.num_data_lanes != 4) {
+	if (bus_cfg.bus.mipi_csi2.num_data_lanes != OV8856_DATA_LANES) {
 		dev_err(dev, "number of CSI2 data lanes %d is not supported",
 			bus_cfg.bus.mipi_csi2.num_data_lanes);
 		ret = -EINVAL;
 		goto check_hwcfg_error;
 	}
 
-	dev_dbg(dev, "Using %u data lanes\n", ov8856->cur_mode->data_lanes);
-
-	if (bus_cfg.bus.mipi_csi2.num_data_lanes == 2)
-		ov8856->priv_lane = &lane_cfg_2;
-	else
-		ov8856->priv_lane = &lane_cfg_4;
-
-	ov8856->modes_size = ov8856_modes_num(ov8856);
-
 	if (!bus_cfg.nr_of_link_frequencies) {
 		dev_err(dev, "no link frequencies defined");
 		ret = -EINVAL;
 		goto check_hwcfg_error;
 	}
-
-	for (i = 0; i < ARRAY_SIZE(ov8856->priv_lane->link_freq_menu_items); i++) {
+/*
+	for (i = 0; i < ARRAY_SIZE(link_freq_menu_items); i++) {
 		for (j = 0; j < bus_cfg.nr_of_link_frequencies; j++) {
-			if (ov8856->priv_lane->link_freq_menu_items[i] ==
-			    bus_cfg.link_frequencies[j])
+			if (link_freq_menu_items[i] ==
+				bus_cfg.link_frequencies[j])
 				break;
 		}
-
 		if (j == bus_cfg.nr_of_link_frequencies) {
 			dev_err(dev, "no link frequency %lld supported",
-				ov8856->priv_lane->link_freq_menu_items[i]);
+				link_freq_menu_items[i]);
 			ret = -EINVAL;
 			goto check_hwcfg_error;
 		}
 	}
-
+*/
 check_hwcfg_error:
 	v4l2_fwnode_endpoint_free(&bus_cfg);
 
@@ -2387,45 +1747,76 @@ static int ov8856_remove(struct i2c_client *client)
 	media_entity_cleanup(&sd->entity);
 	v4l2_ctrl_handler_free(sd->ctrl_handler);
 	pm_runtime_disable(&client->dev);
+	if (!pm_runtime_status_suspended(&client->dev))
+		__ov8856_power_off(ov8856);
+	pm_runtime_set_suspended(&client->dev);
 	mutex_destroy(&ov8856->mutex);
 
-	__ov8856_power_off(ov8856);
-
 	return 0;
 }
 
 static int ov8856_probe(struct i2c_client *client)
 {
 	struct ov8856 *ov8856;
+	unsigned int i;
 	int ret;
 
-	ov8856 = devm_kzalloc(&client->dev, sizeof(*ov8856), GFP_KERNEL);
-	if (!ov8856)
-		return -ENOMEM;
-
-	ret = ov8856_get_hwcfg(ov8856, &client->dev);
+	ret = ov8856_check_hwcfg(&client->dev);
 	if (ret) {
-		dev_err(&client->dev, "failed to get HW configuration: %d",
+		dev_err(&client->dev, "failed to check HW configuration: %d",
 			ret);
 		return ret;
 	}
 
+	ov8856 = devm_kzalloc(&client->dev, sizeof(*ov8856), GFP_KERNEL);
+	if (!ov8856)
+		return -ENOMEM;
+
 	v4l2_i2c_subdev_init(&ov8856->sd, client, &ov8856_subdev_ops);
+	ov8856->fmt.code = MEDIA_BUS_FMT_SGRBG10_1X10;
 
-	ret = __ov8856_power_on(ov8856);
-	if (ret) {
-		dev_err(&client->dev, "failed to power on\n");
+	ov8856->xvclk = devm_clk_get(&client->dev, "xvclk");
+	if (IS_ERR(ov8856->xvclk)) {
+		dev_err(&client->dev, "failed to get xvclk\n");
+		return -EINVAL;
+	}
+
+	ret = clk_set_rate(ov8856->xvclk, OV8856_XVCLK_24);
+	if (ret < 0) {
+		dev_err(&client->dev, "failed to set xvclk rate (24MHz)\n");
 		return ret;
 	}
+	if (clk_get_rate(ov8856->xvclk) != OV8856_XVCLK_24)
+		dev_warn(&client->dev,
+			 "xvclk mismatched, modes are based on 24MHz\n");
+
+	ov8856->n_shutdn_gpio = devm_gpiod_get(&client->dev, "reset",
+					       GPIOD_OUT_LOW);
+	if (IS_ERR(ov8856->n_shutdn_gpio)) {
+		dev_err(&client->dev, "failed to get reset-gpios\n");
+		return -EINVAL;
+	}
+
+	for (i = 0; i < OV8856_NUM_SUPPLIES; i++)
+		ov8856->supplies[i].supply = ov8856_supply_names[i];
+
+	ret = devm_regulator_bulk_get(&client->dev, OV8856_NUM_SUPPLIES,
+				      ov8856->supplies);
+	if (ret)
+		dev_warn(&client->dev, "failed to get regulators\n");
+
+	ret = __ov8856_power_on(ov8856);
+	if (ret)
+		dev_warn(&client->dev, "failed to power on\n");
 
 	ret = ov8856_identify_module(ov8856);
 	if (ret) {
 		dev_err(&client->dev, "failed to find sensor: %d", ret);
-		goto probe_power_off;
+		return ret;
 	}
 
 	mutex_init(&ov8856->mutex);
-	ov8856->cur_mode = &ov8856->priv_lane->supported_modes[0];
+	ov8856->cur_mode = &supported_modes[0];
 	ret = ov8856_init_controls(ov8856);
 	if (ret) {
 		dev_err(&client->dev, "failed to init controls: %d", ret);
@@ -2467,14 +1858,32 @@ static int ov8856_probe(struct i2c_client *client)
 	v4l2_ctrl_handler_free(ov8856->sd.ctrl_handler);
 	mutex_destroy(&ov8856->mutex);
 
-probe_power_off:
+	return ret;
+}
+
+static int __maybe_unused ov8856_runtime_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov8856 *ov8856 = to_ov8856(sd);
+
+	return __ov8856_power_on(ov8856);
+}
+
+static int __maybe_unused ov8856_runtime_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov8856 *ov8856 = to_ov8856(sd);
+
 	__ov8856_power_off(ov8856);
 
-	return ret;
+	return 0;
 }
 
 static const struct dev_pm_ops ov8856_pm_ops = {
 	SET_SYSTEM_SLEEP_PM_OPS(ov8856_suspend, ov8856_resume)
+	SET_RUNTIME_PM_OPS(ov8856_runtime_suspend, ov8856_runtime_resume, NULL)
 };
 
 #ifdef CONFIG_ACPI
@@ -2488,7 +1897,7 @@ MODULE_DEVICE_TABLE(acpi, ov8856_acpi_ids);
 
 static const struct of_device_id ov8856_of_match[] = {
 	{ .compatible = "ovti,ov8856" },
-	{ /* sentinel */ }
+	{}
 };
 MODULE_DEVICE_TABLE(of, ov8856_of_match);
 
